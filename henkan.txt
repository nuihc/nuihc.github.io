import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.UnsupportedEncodingException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.Arrays;

public class henkan {
    public static void main(String[] args) {
        henkan stu = new henkan();
        stu.readFolder(new File("D:\\test"));
    }

    public void readFolder(File dir) {
        File[] files = dir.listFiles();
        String fileName;
        if (files == null) {
            return;
        }
        for (File file : files) {
            if (!file.exists()) {
                continue;
            } else if (file.isDirectory()) {
                readFolder(file);
            } else if (file.isFile()) {
                try {
                    byte[] byteOfFile = convertFile(file);
                    fileName = file.getName();

                    if (isSJIS(byteOfFile)) {
                        encodeStoU(file, fileName);
                    } else {
                        System.out.println(fileName + "はSJISじゃありません");
                    }
                } catch (IOException e) {
                    System.out.println("IOExceptionエラー");
                }
            }
        }
    }

    public void encodeStoU(File file, String fileName) {
        String parentPath = file.getParent();
        String sourcePath = parentPath + "\\" + fileName;
        String destFolder = parentPath + "\\converted";
        String destPath = parentPath + "\\converted\\" + fileName;

        File folder = new File(destFolder);
        if (!folder.exists()) {
            try {
                Files.createDirectory(Paths.get(destFolder));
                Files.createFile(Paths.get(destFolder, fileName));
            } catch (IOException e1) {
                e1.printStackTrace();
            }
        }

        try {
            File sourceFile = new File(sourcePath);
            BufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream(sourceFile), "Shift-JIS"));
            File destFile = new File(destPath);
            BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(destFile), "UTF-8"));

            String line;
            while ((line = br.readLine()) != null) {
                bw.write(line);
                bw.newLine();
            }
            br.close();
            bw.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public byte[] convertFile(File file) throws IOException {
        return Files.readAllBytes(file.toPath());
    }

    public static boolean isSJIS(byte[] src) {
        try {
            byte[] tmp = new String(src, "Shift_JIS").getBytes("Shift_JIS");
            return Arrays.equals(tmp, src);
        } catch (UnsupportedEncodingException e) {
            return false;
        }
    }
}
