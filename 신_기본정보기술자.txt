ㅇㅇㅇㅇ1. 컴퓨터 구성요소ㅇㅇㅇㅇ
1-1. 정보의 표현
정보량의 최소단위 bit
8bit = 1 Byte
10^3 k
10^6 M
10^9 G
10^12 T

10^-3 m 미리
10^-6 μ 마이크로
10^-9 n 나노
10^-12 p 피코

a^m * a^n = a^*(m+n)
a^0 = 1
a^(-m) = 1/(a^m)

ASCII코드
영숫자, 기호, 제어문자만
미국 표준 기호로 가장 기초가 되는 문자 코드
한자, 카나 같은 일본어는 없음
시프트JIS코드
아스키 코드에 한자, 카나 더한 코드
EUC
유닉스, 리눅스 등에서 사용 됨
한자, 카나도 사용 가능
Unicode
세계의 많은 코드를 하나의 체계로 만든 코드
유니코드를 부호화 한 방식 중 하나가 UTF-8

문제1)
32비트로 표현할 수 있는 비트패턴의 개수는 24비트로 표현할 수 있는 개수의 몇 배인가.
32비트 비트패턴의 정보량은 2^32
2^32 / 2^24
= 2^8
따라서 256배

문제2)
시스템 개발에서 공수(人月 にんげつ)과 기간의 관계가
기간 = 2.5 * 공수^(1/3)인 경우, 공수 4096 닌게츠의 기간은 몇 개월인가
x = 2.5 * 4096^(1/3)
x = 40 개월

1-2. 컴퓨터의 구성
컴퓨터의 5가지 장치
cpu - 제어 : 기억장치에서 프로그램의 명령을 받아서 해독, 각 장치에 지시를 내림
      - 연산(演算 えんざん) : 사칙연산이나 논리연산 등을 행함
기억 : 데이터나 프로그램을 기억함
입력 : 컴퓨터의 외부에서 프로그램이나 데이터를 읽어들임
출력 : 컴퓨터의 내부에서 처리된 데이터를 외부로 출력

데이터 흐름
입력 -> 기억 -> (연산, 제어) -> 출력

프로그램의 기억 방식(프로그램 격납 방식)
현대 컴퓨터는 주기억장치(RAM 등)에 기억 된 프로그램을 cpu가 순서대로 읽고 해독, 실행하는 방식.

1-3. CPU
컴퓨터의 두뇌에 해당. 프로세서라고도 불림.
주로 크록크 주파수, 바스폭으로 표기됨.

크록크 주파수
주파수가 올라갔다가 내려간 주기를 1 크록이라고 봄.
올라가고 내려갔다가 다시 올라가기 전 까지를 전부 1크록으로 봄.
컴퓨터의 동작의 기준이 되는 크록기호(크록 펄스 パルス)
1초에 1크록이 몇 번 반복되는 가를 표기한 게 크록 주파수이고, 단위는 Hz를 사용함.
예를 들어 2GHz라고 하면 1초에 2* 10^9 번 반복했다는 말임.

cpu 내부 크록주파수를 내부 크로크
cpu와 주기억장치 등의 주변회로를 연결하는 전송로의 크로크주파수를 외부크로크(시스템 크로크)라고 함
일반적으로 cpu 클록이 높으면 그만큼 성능은 좋아지지만
cpu 클럭이 2배 높아졌다고 해서 시스템 전체가 2배 좋아졌다고 할 수는 없음

버스
cpu나 주기억장치, 캐쉬메모리 등으로 서로가 데이터의 송수신을 하기 위해 존재하는 전송로를 버스라고 부름
일반적으로 버스폭이 넓을 수록, 클럭 주파수가 클 수록 데이터를 고속으로 송수신할 수 있음

문제1)
pc의 클럭 주파스에 관한 기술 중 적절한 것은?
ㄱ. cpu의 클럭 주파수와 주기억을 접속하는 시스템버스의 클럭주파수를 같지 않아도 된다. 맞음
ㄴ. cpu의 클럭주파수의 역수가 1초간 실행할 수 있는 명령수를 뜻한다. 개소리
ㄷ. cpu의 클럭 주파수를 2배로 하면 시스템 전체가 2배 성능이 된다. 개소리
ㄹ. 사용하고 있는 cpu 기종과 클럭 주파수가 等しい(ひとしい)면, 2종류의 pc의 프로그램실행능력은 동등하게 된다.
개소리 그 외 보조기억장치 등 많은 변수가 있음

1-4. cpu의 동작원리
레지스터 - cpu에 내장되어 있는 고속의 기억장치
명령레지스터 - 실행하는 명령을 격납함
명령 어드레스 레지스터(프로그램 카운터 PC) - 다음 실행할 명령의 주소를 격납
지표(指標しひょう)레지스터(인덱스 레지스터) - 기준이 되는 주소를 격납함. 지표어드레스지정방식에서 사용함
기저(基底)레지스터(베이스레지스터) - 기준이 되는 주소를 격납함. 기저어드레스지정방식에서 사용함
아큐무레-타(누계기 累計機) - 연산대상이나 연산결과를 격납함
범용레지스터 - 연산대상이나 연산결과를 격납함. 그 외 여러 목적을 가지고 사용됨

명령어
최종적으로 11011 등의 컴퓨터가 이해할 수 있는 기계어로 교환, 해독, 실행 됨
명령부와 어드레스부(オペランド, 피연산자) 로 구성되고
명령에 따라 어드레스부가 없거나, 어드레스부가 복수일 수도 있음
명령부 - 명령이나 연산을 지시함
어드레스부 - 처리대상이 되는 데이터의 주기억장치의 주소 등을 지시함

명령실행 사이클
(명령과 데이터는 주기억 장치에 있고 나머지는 전부 CPU에 있음)
1. 명령의 추출(取り出し)
명령어드레스레지스터(프로그램 카운터 pc)를 참조하여, 명령이 격납된  주기억장치상의 어드레스를 취득함.
취득한 어드레스에서 명령을 추출(명령 패치 フェッチ)하여, 명령 레지스터에 격납함.(명령부 + 어드레스부)
이때 명령 레지스터에는 다음 명령의 어드레스를 준비 셋 함.
2. 명령의 해독
명령 레지스터의 명령부를 디코더(해독기)로 해독하여 연산장치로 지시를 보냄
3. 실효 어드레스 계산
명령 레지스터의 어드레스 부 값을 어드레스 레지스터로 보내 처리대상의 데이터가 격납된 어드레스(실효 어드레스)를 계산함
4. 오페란드의 추출
처리대상 데이터를 추출하여 연산장치로 보낸다.
5. 명령의 실행
연산장치에서 연산을 실행한다.(받은 지시 + 받은 데이터)
6. 연산결과의 격납
연산결과를 격납한다.

和・差・積・商・
わ・さ・せき・しょう
더하기 빼기 곱하기 나누기

어드레스 지정 방식
컴퓨터는 주기억장치상에 있는 프로그램의 명령을 하나씩 추출하여 해독, 실행하고 있음
어드레스 지정 방식이란 명령의 어드레스부의 값에서 처리대상의 데이터가 격납된 실효 어드레스(유효 어드레스)를 요구하는 방식
어드레스 수식(修飾 しゅうしょく)이라고도 불림
1. 즉치 어드레스 지정 방식
명령의 어드레스부에 데이터 그 자체를 격납하는 방식
2. 직접 어드레스 지정 방식
명령의 어드레스부에 유효(실효) 어드레스 값을 격납하는 방식
어드레스 부(20) -> 주기억 장치의 어드레스 (20)에는 데이터가 짜잔
3. 간적 어드레스 지정 방식
명령의 어드레스부에 유효 어드레스 값을 가진 어드레스 값을 격납하는 방식
어드레스 부(20) -> 주기억 장치의 어드레스 (20) 에는 데이터 25가
-> 주기억 장치 어드레스 (25) 에는 진짜 데이터가 짜잔
4. 상대 어드레스 지정 방식
명령의 어드레스부의 값 + 명령 어드레스 레지스터(프로그램 카운터)의 값을 더한 값을 실효 어드레스로서 격납하는 방식
어드레스 부(20) + PC (50) -> 주기억 장치 주소 70에 데이터가 짜잔
5. 지표 어드레스 지정 방식
명령의 어드레스부의 값 + 지표 레지스터의 값을 더한 값을 실효 어드레스로서 격납하는 방식
어드레스 부(20) + 지표 레지스터 (50) -> 주기억 장치 주소 70에 데이터가 짜잔
6. 기저 어드레스 지정 방식
명령의 어드레스부의 값 + 기저 레지스터의 값을 더한 값을 실효 어드레스로서 격납하는 방식
어드레스 부(20) + 기저 레지스터 (50) -> 주기억 장치 주소 70에 데이터가 짜잔

문제1)
간접 레지스터 그림 보고 이거 뭐냐

문제2)
                      프로세서
주기억 장치 -> (A -> 명령 디코더 ) 
패치되는 명령인데 A에 뭐가 올까?
!명령 레지스터

1-5. CPU의 고속화 기술
기본적으로 cpu는 앞에서 설명한 바와 같이 1~6의 순서로 명령이 실행된다.
- 逐次(ちくじ)제어방식
1~6을 하나의 묶음으로 하나씩 순서대로 반복되며 실행되는 방식
6이 실행되고 다시 1이 되기 까지 1은 계속 놀고 있음 이런 식으로 전부 노는 시간이 많아서 효율 안 좋음
- 파이프라인 방식
축차제어 방식을 한 스테이지 씩 늘려서 실행하는 방식
병렬처리 방식으로 고속화를 노리는 방식
파이프라인으로 효율은 올라갔지만 분기가 발생한 경우에는
미리 읽어서 병렬실행 중이던 명령2를 폐기하고 분기의 새로운 명령3을 실행해야 하는 경우가 발생함
이러한 분기 명령을 대처하기 위해서
실행되는 확률이 높은 명령을 예측하는 분기예측,
예측한 분기처의 명령을 미리 개시하고 결과를 가지고 있다가, 예측한 분기가 맞으면 그 결과를 이용하는 투기실행 등의 기술이 사용됨
- 슈퍼 파이프 라인 방식
파이프 라인 방식을 좀 더 세분화 하여 고속화 하는 방식
하나 씩 비튼 걸 0.5씩 비틂
- 슈퍼 스카라 방식
복수의 파이프 라인을 사용하여 동시에 복수의 명령을 실행하는 것으로 고속화
동시에 실행도 하고 파이프 라인 방식도 사용하고

cpu의 명령체계
cpu의 명령 세트 아키텍처에는 CISC와 RISC가 있음
- CISC (Complex Instruction Set Computer) 
복잡한 명령체계로 한 번의 명령으로 복잡한 처리를 실행시키는 것.
pc의 cpu에서 채용
- RISC(Reduced Instruction Set Computer)
단순한 명령체계로 명령의 실행시간이 평등하게 되고, 파이프라인으로 효과 좋게 처리가 가능함
주로 스마트폰, 타블렛, 조합 시스템 등의 CPU에서 채용

멀티 코어 프로세서
하나의 cpu 안에 복수의 코어로 여러 처리를 동시에 실행 가능

GPU
3D의 동영상 처리를 고속으로 실행하는 동영상 처리 장치

문제1) CPU의 투기실행에 대한 설명
분기 명령의 분기처가 정해지기 전에 에측한 분기처의 명령을 실행을 개시하는 것

문제2) 딥러닝의 학습에 GPU를 이용하는 이점으로 적절한 것은?
범용의 행렬 연산 유닛을 이용하여, 행렬연산을 고속으로 실행할 수 있다.
(GPU는 동영상 처리의 연산을 위해서 대량의 행렬 연산을 실행할 수 있음.)

문제3) RISC 프로세서의 5단계 파이프라인의 명령실행제거의 순서는 어느 것인가.
명령 패치(取出し) -> 명령 엔코더 (해독), 레지스터 파일 읽어들임 -> 실행과 어드레스 생성 -> 메모리 아쿠세스 -> 연산결과 써넣음


1-6. 반도체 메모리
RAM(Random Access Memory) 
읽고 쓰기 가능한 메모리
전원 끊으면 기억하고 있던 내용 날아감(揮発性 きはつせい)

DRAM(Dynamic RAM)
콘덴서에 전하를 갖춘 상태인가 아닌가를 1비트를 표기하고 있음 SRAM에 비교하여 대용량에 가격이 쌈
콘덴서는 오래 방치하면 방전되어 버리기 때문에 한 번씩 리플레쉬 동작(재 쓰고 읽음)이 필요함
주기억 장치에 사용되고 있음
SRAM(Static RAM)
플립플롯(フリップフロップ)회로로 구성되어 고속이지만, 구조가 복잡하여 직접도를 높이기 어렵다.
따라서 DRAM에 비하여 소용량에 가격이 비쌈.
전원이 공급되고 있는 한 기억 내용을 계속 가지고 있기에 리플레쉬 동작은 필요 없음.
캐쉬 메모리에 쓰이고 있음



ROM(Read Only Memory) 
원래는 読み出し 읽기 전용이었지만 최근에는 읽고 쓰기 까지 가능하게 되었음
전원을 끊어도 내용 그대로 남아 있음(비휘발성)

마스크 ROM
쓰기 X 소거 X
제조할 때 써넣은 다음에 사용자가 다시 써넣을 수 없음
UV-EPPROM
자외선조명을 이용하여 전소거 가능
EEPROM
전압으로 부분 소거 가능
소거, 쓰기는 1바이트 단위로 가능
플래시 메모리
전압으로 전소거, 부분 소거 가능
내용 수정은 블록 단위로 소거 후 다시 써넣을 수 있음

캐쉬 메모리
주기억장치 보다도 고속으로, CPU와 주기억 장치간 사이에 배치하는 메모리
CPU --(고속)-- 캐쉬 메모리 --(저속)-- 주기억 장치
주기억 장치에서 읽어들인 데이터를 캐쉬 메모리에 보존하여,
CPU가 나중에 같은 데이터를 읽어들일 때 고속으로 캐쉬 메모리에서 읽어들이는 것으로 실행 악세스 시간을 단축할 수 있음

실효 악세스 시간
악세스하는 데이터는 캐쉬메모리, 주기억장치 둘 중 하나에 존재하고 있음
악세스 데이터가 캐쉬메모리에 보존할 확률을 히트율이라고 함
문제 예)
히트율 80%
캐쉬메모리 악세스 시간 10ns
주기억장치 악세스 시간 60ns
실효 악세스 시간은?
히트율 80%라는 말은 캐쉬 메모리에 존재할 확률 80%,
주기억장치에 존재할 확율 20% (<-이걸 NFP라고도 함 Not Found Probability))
0.8 * 10ns + 0.2 * 60ns = 20ns
따라서 캐쉬메모리를 사용했을 경우의 실효 악세스 시간은 20ns

1차 캐쉬, 2차 캐쉬 메모리
주기억장치와 cpu 사이의 시간 차이가 너무나 큰 경우 캐쉬 메모리를 단계별로 나누기도 함
CPU - 1차 메모리 - 2차 메모리 - 주기억장치
1차 2차를 L1, L2캐쉬라고도 부름

캐쉬메모리에 써넣는 방식은 2가지가 있응ㅁ
라이트 스루 방식
CPU에서 캐쉬메모리와 주기억장치 양쪽에 다 써넣는 방식
라이트 백 방식
CPU에서 캐쉬메모리로만 써넣고, 주기억 장치는 캐쉬메모리에서 요청이 있을 때에만 써넣을 수 있음

메모리 인터리브
주기억장치를 복수의 구획(방크)로 나누고 연속으로 어드레스의 내용을 병렬 악세스하는 것으로 악세스 고속화를 노리는 방식
메모리 1장보다 반 용량 * 2가 더 속도 빠른 걸로 생각


악세스 속도 비교
레지스터
1차 캐쉬
2차 캐쉬
주기억장치
보조기억 SSD
보조기억 HDD
레지스터는 CPU에 내장된 연산처리용 기억회로

문제1)
DRAM 특징은 어느 것?
ㄹ. 메모리셀 구조가 단순하여 고집적화할 수 있고, 비트 단위를 싸게할 수 있다.

문제2) 플래시 메모리의 기술 적절한 것?
ㄹ. 블록 단위로 전기적으로 데이터를 소거할 수 있음

문제3) 캐쉬 메모리 설명 적절한 것?
데이터 써넣는 명령을 실행하였을 때
캐쉬메모리와 주기억장치 양쪽에 써넣는 방식과
캐쉬메모리만 써넣고 주기억 장치의 써넣음은 캐쉬메모리에서 해당 데이터 요구가 발생했을 때 써넣는 방식 이렇게 있음

문제4) 주기억장치의 실효 악세스 시간 짧은 거
ㄱ. 주기억 15ns
ㄴ. 주기억 30ns
ㄷ. 캐쉬메모리 20ns 히트율 60% / 주기억 70ns
ㄹ. 캐쉬메모리 10ns 히트율 90% / 주기억 80ns
주기억의 실효 악세스 시간이라 주기억만 보면 될 줄 알았는데 그게 아니네;;;
ㄷ는 20 * (0.6) + 70 * (0.4) = 40ns
ㄹ는 10 * 0.9 + 80 * 0.1 = 17ns
따라서 ㄱ - ㄹ - ㄴ - ㄷ

1-7. 보조기억장치
CPU가 직접적으로 써넣을 수 있는 것은 주기억장치상에 있는 프로그램이나 데이터 뿐
주기억은 소용량, 전원 끊어지면 내용도 사라지는 휘발성을 가지고 있음
보조기억장치는 주기억에 비하여 저속이지만 대용량, 값쌈, 비휘발성의 특징

자기(磁気 じき)디스크 장치
자기 디스크 장치 HDD는 자성체를 입힌 원형 디스크에 데이터를 기록하고
자기 헤드를 이동시키며 데이터를 읽고 쓰는 장치
데이터를 기록하는 최소단위 - 섹터
섹터가 모여 동심원형이 되는 - 트랙
이 트랙이 모여 - 1면
중심축에서 같은 거리에 있는 트랙의 1층 2층 3층.. 의 집합을 - 실린더
실린더 단위로 악세스하고, 실린더는 논리적 개념임
이러한 기억방식을 섹터방식이라고 부름


악세스 시간
CPU가 데이터의 읽고 씀의 지령을 내리고 나서 데이터의 읽고 씀이 끝나기 까지의 시간을 악세스 시간
자기 디스크 장치의 악세스 시간은 위치결정시간, 회전마치시간, 데이터전송시간의 합으로 구할 수 있음
- 위치결정시간(시-크 시간)
자기 헤드를 목적 데이터가 존재하는 트랙까지 이동시키는 시간
헤드 지잉
- 회전마치시간(사-치 시간)
목적 데이터가 자기 헤드 위치까지 올 때 까지 회전시키는 시간
돌려돌려 돌림판
- 데이터 전송시간
목적 데이터 전체가 자기 헤드를 통과하는데 필요한 시간
피자 꼬다리 모양 전체 스캔 지잉

후라그멘테-숀(단편화)
자기 디스크 데이터를 쓰고 지웠다가 반복하면 데이터가 연속되게 존재하지 않고
여기저기 흩어지는 현상을 말함
당연히 악세스 시간 느려짐
이 플래그멘테이션을 해소하는 것이 디플래그.
단편화 된 데이터를 연속되게 재정렬함

플래쉬 메모리
전기적으로 전부분, 혹은 일부분을 소거하여 내용을 다시 쓸 수 있는 반도체 메모리
대용량에 악세스 시간 빠르고 컴팩트함
USB메모리, SD카드 등

SSD
플래쉬 메모리를 이용한 자기디스크장치를 대신하기 위한 기억매체(媒体 ばいたい)
자기디스크 같은 시크, 서치가 없어서 조용하고 진동, 충격에 강하고 소비전력 낮음 속도 빠름


광디스크
레이저 광을 사용하여 데이터를 읽고 쓰는 기억매체
대용량, 싸고, 내구성 뛰어남
CD
700MB
음악용, PC데이터, 소프트웨어
DVD
17.08GB
PC의 데이터가 아닌 영화 등의 동영상을 기록할 수 있음
BD
100GB
청자색의 레이저광선을 사용하여 하이비젼 영상을 2시간 이상 기록할 수 있음

광디스크의 기억방식
재생전용형(이용자는 쓰기 불가능) CD-ROM / DVD-ROM / BD-ROM
추기형(쓰기 가능, 수정 불가능) CD-R / DVD-R / BD-R
카키카케형(쓰기, 수정 가능) CD-RW / DVD-RW / BD-RE

문제1)
회전수 4200회 / 분으로 평균위치결정시간이 5ms의 자기디스크장치가 있음
이 자기 디스크의 평균마치시간은 약 몇 미리 초인가?
여기서 평균마치시간은 평균위치결정시간 + 평균회전마치시간

rpm은 분당 디스크의 회전 수
1분은 60초
1ms는 1/1000초
60,000ms당 4200회전
1회전에 약 14.28ms 걸린다는 말인데
반바퀴가 평균회전마치시간이니 (회전 마치 한바퀴 돌리면 결국 제자리ㅋㅋ)14.28ms / 2 = 7.14ms
5 + 7.14 = 12.14ms

문제2)
SD 메모리 카드의 상위규격의 하나인 SDXC의 특징은 무엇?
ㄹ. 파일시스템에 exFAT를 채용하여 최대 2TB의 용량을 대응할 수 있음



1-8. 입출력 장치
입력 장치
컴퓨터에 프로그램이나 데이터, 음성, 사진 등을 입력할 수 있게 컴퓨터에 지시를 내려주는 장치
문자 입력의 키보드
위치정보 입력의 마우스, 타블렛
위치정보 입력 장치는 포인팅 디바이스라고도 함
이미지 입력의 스캐너
터치한 부분의 표면전하의 변화를 탐지하여 위치를 검출하는 정전용량방식 터치패널

바코드 리더
상품이나 인쇄 된 帯状(たいじょう 띠모양)의 바코드를 읽어들이는

POS 시스템
(Point of Sales)
레지 입력의 자동화를 꾀하는 것 뿐만 아니라 바코드를 사용한 상품의 판매정보를 리얼 타임으로 수집, 売筋(うれすじ)상품이나 죽은상품 등을 파악할 수 있는 시스템
JAN 코드
일본에서 유통되고 있는 여러 상품을 관리하기 위한 바코드
QR코드
작은 영역으로 많은 정보를 격납할 수 있고, 에러 정정기능을 가지는 이차원 코드

RFID
(Radio Frequency IDentification)
극소의 IC칩에 안테나를 단 전자 꼬리표(荷札 にふだ)
전자파를 이용하여 정보를 비접촉으로 읽어들일 수 있음
IC태그라고도 불림
NFC는 RFID의 국제규격

출력장치
컴퓨터 내부에서 처리한 데이터를 외부로 출력하는 장치

액정디스플레이
빛을 투과하여 화소별로 제어하는 방식
백플레이트, 또는 외부 빛을 포함하는 구조가 필요함
유기EL디스플레이
전극 사이에 전기를 통과시켜 발광하는 특징인 유기화합물을 끼워넣은 구조
스스로 빛을 발하기 때문에 薄型(うすがた), 저전압구동, 저소비전력

해상도
디스플레이의 문자나 영상을 점이 모여 표현시키는데 이 점(비트)를 화소, 픽셀이라고 부름

VRAM(Video RAM)
디바이스에 표시되는 내용을 일시적으로 기록하기 위해 사용하는 전용 메모리
일반적으로 n비트로는 2^n의 색을 대응시킬 수 있음

빛의 3원색 RGB
프린터는 CMY(Cyan파랑 Magenta빨강 Yellow)의 3원색을 조합하여 K (Key plate)를 더한 4색(CMYK)을 사용하고 있음

레이저 프린터
프린터의 성능을 표시하는 지표로 1분간 인쇄할 수 있는 페이지 수를 뜻하는 PPM(Page Per Minute)이 있음
잉크젯 프린터
보통 개인용으로 많이 쓰는 프린터
돗도임팩트 프린터
충격을 주어 인쇄하는 방식으로 시끄럽지만 복사식의 전표인쇄에 사용 됨

dpi?
(dots per inch)는 해상도의 단위
1인치(2.54cm)에 몇 점으로 표시하는 가

3D 프린터
3D 모델링 데이터를 기초로 열을 녹여 樹脂(じゅし) 수지나 금속분말을 층별로 쌓는 등의 방식으로
입체적인 물건을 작성하는 프린터

문제1)
편의점에서 포인트 카드 등의 개인정보와 연결지어진 고객ID 별 POS 데이터를 수집, 분석하는 것에 의해 확인 가능한 것은?
ㄹ. 동일상품의 구입빈도

문제2)
RFID의 활용사례로서 적절한 것은?
ㄹ. 微小(びしょう) 매우 작은 무선팁에 의한 사람 또는 물건의 식별 및 관리

문제3)
3D 프린터의 기능 설명으로 적절한 것
ㄷ. 열융해적층방식 등으로 입체물을 조형하는 것

문제4)
1문자가 縦(たて)48비트, 横32비트로 표시되는 2단 비트맵의 파일이 있다.
문자 데이터가 8,192 종류 있을 때 문자 데이터 전체를 보존하기 위해서 필요한 영역은 몇 바이트인가

2단비트맵이랑 흑백으로 표현된 데이터를 뜻 함
하나의 점에 대응되는 데이터는 0 , 1 이므로 1bit
48 * 32 * 1 * 8192 = 12,582,912bit
바이트로 고치면 1,572,864 byte
약 1.5 MByte


1-9. 입출력 인터페이스
PC 본체와 주변기기를 젖ㅂ속할 수 있게 해주는 규격의 총칭

USB
(Universal Serial Bus) 
표준적인 시리얼인터페이스
USB 버스라는 유닛 쓰면 최대 127대까지 접속 가능
USB1.1 12Mbps 풀스피드
USB2.0 480Mbps 하이스피드
USB3.0 5Gbps 슈퍼스피드

핫 플래그?
접속되어 있는 기기의 전원을 넣은 상태로 뽑아도 괜찮은 기능 USB 생각
바스파워
USB 케이블을 통하여 컴퓨터의 본체에서 전원을 공급하는 방식

HDMI
영상 음성 제어 신호

블루투스
면허가 필요 없는 2.4GHz대의 전파를 이용하는 인터페이스
24Mbps, 반경 100m, 지향성 없이 통신 가능

지그비
면허 필요 없는 2.4GHz대의 전파를 이용하는 인터페이스
250kbps, 저비용, 저소비전력의 특징


문제1)
USB 3.0의 설명 적절한 것?
ㄹ. 슈퍼스피드라고 불리는 5Gbps의 데이터 전송 모드를 가지는 시리얼 인터페이스


ㅇㅇㅇㅇ2. 소프트 웨어와 멀티미디어ㅇㅇㅇㅇ
2-1. 소프트웨어
OS (os : Operating System) 
하드웨어나 어플리케이션소프트웨어(응용 소프트웨어) 를 관리, 제어하는 소프트웨어
기본소프트웨어라고도 불림
윈도우 유닉스 리눅스 안드로이드 IOS 등

제어프로그램
하드웨어 자원의 상태를 상항 감시하고 컴퓨터의 효과적인 이용을 실현하는 소프트웨어군
狭義좁은 뜻의 OS라고도 불림

쟙 관리 - 쟙 스케쥴 관리
타스트 관리 - cpu 보다 효과적 사용을 위해 와리아테
기억 관리 - 주기억장치를 보다 효과적으로 관리
파일 관리 - 디렉토리, 파일 등을 관리
그 외 등 등

유저
어플리케이션 소프트웨어
미들웨어 - os 와 app 사이에서 통일적인 인터페이스나 공통의 기본기능을 제공하기 위한 소프트웨어
OS
하드웨어

API(Application Program Interface) 
어플에서 OS가 준비한 각기능을 이용하기 위한 조합? 구조?
개발자는 0에서 개발하는 게 아니고 OS가 준비한 API를 이용하여 개발하는 게 효율적

디바이스 드라이버
pc 접속하기 위한 주변장치를 제어하하는 프로그램
플러그 앤 플레이(꽂으면 자동으로 필요한 설정, 드라이버 설치)

OSS(Open Source Software)
소스 코드를 공개하고 있는 소프트웨어
OSI에서 주장하는 OSS 최저조건으로
頒布(はんぷ) 반포(배포)처가 되는 개인이나 그룹, 이용분야를 제한하지 않음
재배포로 추가 라이센스를 요구하지 말 것
특정 제품에 제한적인 라이센스로 하지 말 것
여기서 PC나 IoT디바이스용으로 용도에 따라 OS, GUI환경, 어플 등을 조합하여 패키지로 재배포하는 단체를 디스트리뷰터라고 부름

OSS 라이센스
OSS 이용에 따른 라이센스 조건이 표면적으로
BSD(Berkeley Software Distribution) , GPL(GNU General Public License) 이 있음
BSD 라이센스는
무보증일 것,
개변 후의 재배포 시 원 소프트웨어의 저작(著者 ちょしゃ)권표시부분이나 라이센스 조문을 남길 것,
이 2가지의 제약이 있음
GPL은 여기에 카피레프트를 추가함
카피레프트란 저작권을 보유한 채로 프로그램의 복제, 개변, 배포를 제한하지 않고,
그 프로그램에서 파생된 2차저작물(파생물)에는 오리지날과 같은 배포조건을 적용한다는 개념
다시 말해 소프트웨어를 독점하지 않고, 함께 개량하여 공유 자산으로 하자는 의미

BSD
무보증
원 소스 저작권, 라이센스 표시 필요
변경한 것 자체를 표시할 필요 없음
소스 코드의 개시 필요 없음
다른 라이센스로 할 수도 있음

GPL
무보증
원 소스 저작권, 라이센스 표시 필요
소스 코드 개시 필요
다른 라이센스로 금지


문제1)
디바이스드라이버의 설명
ㄱ. PC에 접속된 주변기기를 제어하기 위한 소프트웨어

OSI에 의한 오픈 소스 소프트웨어의 정의를 따를 때 오픈 소스 소프트웨어에 대한 취급으로 적절한 것은?
ㄹ. 사내에서의 이용 등과 같이
오픈 소스 소프트웨어를 개변하여도 재배포 하지 않는 경우, 개변부분의 소스코드를 개시않아도 된다.

오답해설
ㄱ. 이용분야를 제한해서는 안 됨
ㄴ. 자유롭게 재배포 가능함. GPL에서는 이 조건이 있음.
ㄷ. 추가 라이센스비는 요구되지 않음.


2-2. 잡 관리와 타스크 관리
잡은 유저의 위치에서 바라 본 일의 단위
타스크는 OS에서 바라 본 일의 단위

잡관리
잡스케쥴링은 잡의 입력, 출력을 관리함
등록된 잡은 입력마치행렬에 등록되어 순서대로 처리를 기다림
처리된 후는출력마치행렬에 등록되어 순서대로 프린터 등에 처리결과가 출력되기를 기다림
큐스택 사용

스풀링
스풀링은 주기억장치와 저속의 입출력장치와의 데이터 전송을 보조기억장치를 끼워서 실행하는 것
예를 들어 프린터로의 출력데이터를 일시적으로 자기디스크에 써넣고, 프린터의 처리속도에 맞춰 조금씩 출력됨.
스풀링은 스루풋의 향상에 도움 됨

타스크 관리
타스크의 생성에서 소멸까지를 실행가능상태 / 실행상태 / 마치상태 3가지로 구분하여 관리
CPU를 유효활용하고 있음
- 실행가능상태 Ready
CPU의 사용권이 할당되기를 기다리는 상태.
- 실행상태 Run
CPU의 사용권이 할당되어 실행하고 있는 상태.
CPU가 하나만 존재할 경우, 실행상태 타스크는 하나만 존재
- 마치상태
다른 타스크가 입출력장치를 사용하고 있기 때문에 입출력처리가 완료되기를 기다리는 상태

태스크 상태 전이
1. 타스크 생성 -> 실행가능상태
생성 직후 태스크는 실행가능상태가 됨
2. 실행가능상태 -> 실행상태
실행할 태스크가 선택되어 CPU의 사용권을 부여하고 실행상태로 올림
CPU의 사용권을 할당하는 것을 디스패치라고 함
3. 실행상태 -> 실행가능상태
실행상태 중 다른 태스크가 우선도가 높은 경우, 끼어듦이 발생, 우선도가 높은 태스크에 사용권을 부여함
따라서 현재 실행상태 태스크는 원래 상태인 실행가능상태로 되돌림
4. 실행상태 -> 마치상태
실행상태 중에 입출력마치가 발생한 경우 마치상태로 전이함
5. 마치상태 -> 실행가능상태
입출력처리가 완료 되면 실행가능상태로 되돌림

태스크 스케쥴링
복수 태스크 중 어느 태스크를 우선적으로 사용권을 할당하는 방식
- 선착순방식
실행가능마치행렬의 선두에 있는 태스크부터 순서적으로 사용권을 할당함
- 처리시간순방식
처리예정시간이 가장 짧은 태스크부터 순서적으로 사용권을 할당
- 우선도순방식
우선도가 높은 태스크부터 사용권을 할당
- 라운드로빈방식
실행가능마치행렬의 선두에 있는 태스크부터 순서적으로 사용권을 할당하고,
일정시간(타임 슬라이스)가 경과한 경우, 실행 중단하고, 중단한 태스크는 실행가능마치행렬의 가장 마지막으로 보냄

멀티 태스크
복수의 태스크에 CPU의 처리시간을 순서대로 할당하는 것으로 태스크가 동시에 실행되는 것 같이 보이게 하는 방식
멀티프로그래밍이라고도 불림
겉으로 보기에는 복수의 태스크를 병렬처리하는 것 처럼 보임
예를 들어 우선도 높은 A태스크가  실행 중 CPU, I/O 를 오가며 처리를 하는데
CPU사용 후 I/O처리를 할 때에는 CPU가 놀게 됨
이 노는 시간을 유휴遊休(ゆうきゅう)시간, 아이돌타임이라고도 부름
이 노는 유휴시간에 태스크B의 처리를 시키는 것

태스크 실행방식에는 OS가 CPU를 관리하지 않고 프로그램에게 맡기는 논프리엔프티브방식(비선점방식)과
OS가 CPU를 관리하는 선점방식(프리엔프티브방식)
현재는 선점방식이 주류

멀티스레드
하나의 프로그램 안에서 병렬처리가 필요한 부분을 복수의 처리단위(스레드)로 분해하여
스레드를 병렬로 처리하는 OS의 기능

와리코미처리
실행중의 프로그램을 일시 중단하고, 제어프로그램으로 제어를 옮겨서 필요한 다른 처리로 바꾸는 것을 말함
와리코미에는 실행중인 프로그램이 원인으로 일어나는 내부와리코미,
-내부와리코미
프로그램 와리코미
SVC(슈퍼바이저 콜)와리코미

실행중인 프로그램 이외가 원인이 되는 외부와리코미가 있음
-외부와리코미
기계체크와리코미
입출력와리코미
타임와리코미
콘솔와리코미

M/M/1의 마치행렬모델
편의점 레지에서 손님 행렬 차례대로 처리하는 거 생각하라네

문제1)
3개의 태스크 우선도, 각 태스크를 단독실행한 경우의 CPU와 I/O 작동순서과 처리 시간을 표로 나타냄
우선도방식의 태스크 스케쥴링을 행한 OS의 경우 3개의 태스크가 동시에 실행가능상태가 되고 나서,
모든 태스크가 실행이 종료되기 까지의 CPU의 유휴시간은 몇 ms인가.
CPU는 하나이고, 1코어로 구성되어 있음
I/O는 경합하지 않음

고 CPU(3) -> I/O(5) -> CPU(2)
중 CPU(2) -> I/O(6) -> CPU(2)
저 CPU(1) -> I/O(5) -> CPU(1)

그냥 CPU는 우선순위대로 와리코미 막 시키고, I/O는 경합 없이 때 되면 실행되게 하면 됨
2ms + 1ms = 3ms

문제2)
내부와리코미로 분류되는 것
ㄴ. 제로로 除算(じょさん)나눗셈를 실행한 경우의 와리코미

문제3)
스풀링 기능의 설명으로 적절한 것
ㄷ. 주기억장치와 저속의 입출력장치 사이의 데이터 전송을 보조기억장치를 끼워서 실행하는 것으로
    시스템 전체의 처리능력을 높이는 것

문제4)
우선도를 기본으로 하는 프리엔프티브한 스케쥴링을 실행하는 리얼타임OS에서, 2개의 태스크A, 태스크B를 스케쥴링한다. 
A가 B보다 우선도가 높은 경우, 리얼타임OS가 실행하는 동작의 설명 중 적절한 것은?
ㄷ. B의 실행중에 A의 실행이 걸리면, B의 실행가능상태로 하고 A를 실행함

문제5)
전송태스크 -> 버퍼사이즈 : L -> 수신태스크
                S                      R
L ≧ (S - R) * T

2-3. 기억관리
프로그램기억방식은 프로그램을 주기억장치에 읽어들여 두고, CPU가 순서대로 읽고 쓰기를 실행하는 방식
현재 컴퓨터에는 이 방식으로 프로그램은 자기디스크 등의 보조기억장치에 보존되어 있지만,
실행시에는 주기억장치에 배치하고, 실행이 끝나면 주기억장치에서 소거됩니다. (주기억장치의 해방)

주기억장치 그 자체를(실기억) 보다 효과적으로 쓰기 위한 실기억관리
구획방식
- 고정구획방식
주기억장치를 사전에 정한 크기의 구획으로 분할하는 방식.
사용률 나쁘지만 처리시간은 일정하고 빠름
- 가변구획방식
주기억장치를 프로그램이 필요한 크기의 구획으로 분할하는 방식.
주기억장치의 사용률은 좋지만, 처리시간이 불안정하여 느림.

또한, OS가 주기억의 영역의 획득, 해방을 반복하는 것으로 미세한 미사용 영역이 발생하는 현상을 플래그멘테이션이라고 함.
플래그맨테이션을 해결하기 위해서는 잘게 잘려진 미사용 영역을 연속된 하나의 영역으로 모아서 다시 이용가능하게 하는데 이걸 메모리컴팩션이라고 함.

스와핑 방식
주기억장치의 용량이 부족한 경우,
실행중의 프로그램 중에 우선도가 낮은 프로그램을 일시중단하고, 자기디스크로 퇴피(스왑아웃)하고,
우선도가 높은 프로그램을 주기억장치에 배치(스왑인)하는 방식.

오버레이 방식
사전에 프로그램을 동시에 실행하지 않는 배타적인 몇 가지의 단위(세그먼트)로 분할하여 두고,
실행시에는 필요한 부분만 주기억 장치에 배치하여 실행하는 방식.

메모리 리크
사용가능한 주기억장치의 용량이 감소하는 것.
메모리 리크를 해소하기 위해서는 불필요한 영역을 해방하는 카베지컬렉션을 행하거나 재기동할 필요가 있음.

가상기억방식
프로그램을 가상기억공간에 격납해 두고,
실행시에 필요한 프로그램이나 데이터를 동적으로 실기억(주기억장치)에 배치하여 실행하는 방식.
주기억장치의 용량 보다 큰 메모리가 필요한 경우 프로그램을 실행할 수 있게 된다.
가상기억상의 번지(가상 어드레스)를 주기억상의 번지(실 어드레스)를 교환하게 되는데,
이 교환을 동적어드레스교환기능(DAT Dynamic Address Translator) 라고 함

페이징 방식
가상기억관리 중의 하나로, 주기억과 프로그램을 固定長(페이지)(데이터의 길이가 일정함 반댓말 가변장) 로 분할하여, 
이 페이지 단위로 관리하는 방식
실행하는 페이지가 주기억에 존재하지 않을 때에는 페이지フォルト(fault)라고 불리는 끼어듦이 발생하고,
불필요한 페이지를 실기억에서 보조기억으로 내보내고(페이지 아웃), 
필요한 페이지를 보조기억장치에서 주기억으로 배치 시킴(페이지 인, 로드)
또한, 페이지폴트가 많이 발생하면 처리확률이 급격히 저하하는 현상을 슬래싱이라고 함.
슬래싱을 피하기 위해서는 주기억의 증설, 잡의 대량도를 낮춰서 주기억의 사용을 제어할 필요가 있음.

페이지 오키카에 치환 알고리즘
부재 횟수가 적은 게 좋음
- FIFO (First-In First-On) 
가장 오래 주기억에 존재하는 페이지를 치환
먼저 들어온 게 먼저 나온다. 먹고 싸기.
★덮어 쓴 써도 최근으로 취급 안 해줌.
- LRU (Least 가장 적은 Recently Used) 
마지막 참조 시간이 가장 긴 페이지를 치환
페이지 프레임 중에 가장 오랫동안 사용되지 않은 애를 지우고 새로운 애 들어감
LFU (Least 가장 적은 Frequently 자주 Used) 
참조회수가 가장 적은 페이지부터 치환

문제1)
페이징 방식의 가상기억을 이용하는 방법의 효과는 어느 것
ㄴ. 처리에 필요한 페이지를 동적으로 주기억에 할당하는 것으로 주기억을 보다 효과적으로 사용할 수 있음

문제2)
가상기억 시스템의 주기억장치의 용량이 부족할 경우,
프로그램의 다량도를 증가시키면 시스템의 오버헤드가 증가하여,
어플의 프로세서 사용률이 감소하는 현상을 뭐라고 함?
ㄱ. 슬래싱

문제3)
메모리맵에서 세그먼트2가 해방되었을 때, 세그먼트를 이동(동적재배치)하여 분산하는 빈영역을 모아서 하나의 연속영역으로 하고 싶다. 한 번의 메모리악세스는 4Byte로 행하고, 읽기, 쓰기가 각각 30ms가 걸리면 동적재배치를 하는데 필요한 메모리 악세스 시간은 합계 몇 ms 인가
1kByte는 1000Byte로 함

세그먼트1 / 세그먼트2 / 세그먼트3 / 빈공간
500kByte     100kByte    800kByte   800kByte

세그먼트3의 뒤쪽에 있는 100kByte 만큼을 세그먼트2로 옮기면 됨.
근데 세그먼트3 전체에 악세스 해야하니 800Kbyte / 4Byte = 200*10^3회의 악세스가 필요
읽고, 쓰기 각각 필요하니 200*10^3 * 30ms * 2 = 12ms

문제4)
가상기억방식의 실기억에 할당하는 페이지 수를 3으로 하고,
오이다스 페이지를 선택하는 알고리즘을 FIFO, LRU 두 가지로 하였을 경우, 오키카에 횟수로 알맞은 것.
1, 3, 2, 1, 4, 5, 2, 3, 4, 5
FIFO 3회
LRU 6회

문제5)
메모리 리크의 설명으로 적절한 것
ㄱ. OS나 어플의 버그 등이 원인으로, 작동중에 확보한 주기억장치가 개방되지 않아
이것이 발생하면 주기억장치의 이용가능한 부분이 감소한다.

2-4. 파일 관리
계층구조의 최상위에 있는 디렉토리를 루트디렉토리,
디렉토리 하위에 작성된 디렉토리를 서브디렉토리
현재 조작대상인 디렉토리를 카렌토 디렉토리
/next/child/page.html

루트 디렉토리 /
서브디렉토리 next, child

파스 지정
- 절대 파스
루트 디렉토리를 기점으로 목적 디렉토리로 향하는 것
- 상대 파스
카렌토 디렉토리를 기점으로 목적 디렉토리로 향하는 것

/가 파스명 선두에 있을 경우 왼단에 루트디렉토리가 생략되어있는 것으로 봄
한 단계 위로 갈 경우에는 ..를 사용함

하루 3시간 공부 가능 3시간이면 50페이지 소화 가능

84페이지부터
하루 100페이지 가능?
그러게 왜 놀았니
저 끝에 스토라테지계는 버림 ㅅㄱ
대략 450페이지 까지
그러면 가능은 하겠는데..