JavaSE11부터 소스파일 모드 추가됨.
java커맨드는 .java파일을 직접 실행 가능.

package – import – class 순서

다른 패키지에 있는 클래스 이용할 때는 완전수식클래스명으로 불러야한다.

람다식을 둘러싼 블록의 안에서 선언된 로컬변수를
람다식 내에서 이용할 때에는 그 변수를 final로 선언하지 않으면 안된다.
int i = 0; X
final int i = 25; O
Supplier<Integer> foo = () -> i;
i++

인스턴스 변수 혹은 클래스 변수
//
로컬변수
이렇게 두 가지는 동시에 같은 이름으로 정의는 가능하지만
메소드 내에서 우선되는 건 로컬변수이다.

로컬변수는 반드시 초기화를 해야 한다.

모듈의 설정파일(module-info.java)
requires : 그 모듈이 이용하는 다른 모듈명을 기술한다.
서로 동시에 얽혀있으면 컴파일 에러 남.
module A{
    requires B;
}
module B{
    requires A;
}
exports : 외부에 공개하는 패키지를 선언한다.

java.base모듈은 자바의 기본적인 클래스라이브러리가 분류되어 있는 모듈로
어느 모듈에서도 필요한 것이기에 암묵적으로 requires되어 있다.

String.charAt(index)
인덱스 위치에 있는 한 글자 리턴

Character.isPlphabetic(String)
스트링이 알파벳이면 true

Character.isDigit(String)
스트링이 숫자이면 true

String.endsWith(String)
스트링의 마지막이 스트링으로 끝나면 true

String.substring(index1)
스트링에서 인덱스1 이후의 글자를 잘라서 출력
index1이 8이면 8에서 잘라서 그 이후의 글자를 출력

String.substring(index1, index2)
스트링의 인덱스1에서 인덱스2까지 잘라서 출력

jdeps --list-deps
java --show-module-resolution
클래스나 모듈의 의존관계를 알기 위한 커맨드

jmod describe
모듈 작성을 위한 커맨드

java Hello.java
java커맨드의 소스파일모드에 의한 실행

jar
여러 파일을 모아서 jar파일을 만드는 커맨드

추상메소드를 실장하는 것은 구상메소드

{}이게 있으면 실장했다는 뜻

추상클래스는 어중간한 놈이라
추상메소드 + 실장메소드 둘 다 가질 수 있음
추상메소드는 반드시 abstract를 붙여야 하고
실장 메소드는 반드시 {}가 있어야 한다

var는 형태 추론형

String.indexOf(String)
스트링에서 인수 스트링이 시작되는 지점의 인덱스를 리턴

푸리미디브형(기본 8가지 형태)

switch(str)
str이 null이면 NullPointerException으로 예외가 스로된다.

List<String> list = Arrays.asList(new String[]{"a","b","c"});
list.forEach(x -> {System.out.println(x);});
x의 데이터 형태로 알맞은 것은
String
(List안의 내용물이 String으로 선언되었으니까?)

javac -d bulid ex15/Sample.java ex15/Main.java
java -cp bulid ex15.Main
javac커맨드에서 -d옵션으로 출력처를 지정할 수 있음
지정 안하면 소스파일과 같은 장소에 클래스파일 출력됨
java커맨드에서 인수는 완전수식클래스명을 지정해야 함
java커맨드에서 기본 디렉토리 이외의 클래스파일을 실행할 때에는
-cp옵션으로 클래스패스 지정함
bulid는 빌드디렉토리 지정하는 것

LocalDate.now()
현재 시간을 정해진 형식으로 출력함
.with(TUESDAY)
다음 TUESDAY(화요일)로 변경하고
.getDayOfWeek()
요일을 Enum형식으로 출력한다.

추상메소드를 private로 선언할 수는 없다.
인터페이스는 public이외의 수식자로 선언할 수 없다
이너클래스는 아무 수식자 다 붙일 수 있다.

인터페이스는 실장메소드를 가질 수 있다.
어떻게? 유일하게 default 메소드를 통해서만.

인터페이스 특징
공개할려고 작정하고 만든 것
인스턴스화 할 수 없고, 실현하는 클래스가 필요(implement)
추상메소드를 정의함
자바8부터 디폴트메소드(실장된 {}) 사용 가능

추상클래스 특징
인터페이스를 실현한 클래스의 클래스의 공통 부분을 정의하기 위한 것
그대로 인스턴스화할 수 없고, 계승한 서브클래스가 필요함
추상메소드와 구상메소드 양 쪽 기술 가능

인터페이스는 final 사용 불가능
인터페이스는 abstract를 붙여서 선언이 가능함
원래는 없어도 컴파일러가 알아서 abstract 붙여서 해석해 주는 것

JDK를 모듈화한 이유
-어플리케이션 모듈과 JDK모듈의 링크가 쉽게 구축 가능
-세큐리티와 메인테넌스성의 향상(패키지 단위로의 정보 은닉)

12장 31번부터

var alphabet = new ArrayList<>(
Array.asList(
       new String[] {"A", "B", "C", "D", "E",}
));
alphabet.sort((var a, var b) -> -a.compareTo(b));
alphabet.forEach(System.out::println);

람다식 풀면
public int name(var a, var b){
return -a.compareTo(b);
}

마이너스 붙었으니까 역전;;
compareTo()는 같은 Number객체가 아니면 사용 불가능
a와 b를 비교해서 int 퉤
근데 마이너스 붙은 int로 퉤
-니까 sort를 거꾸로

keys.clear();
리스트(keys)를 클리어하고 keys.size() 같은 거 쓰면
java.lang.UnsupportedOperationException 예외가 스로된다.

public void methodE(){
   return;
}
리턴 있어도 되고 없어도 되고
리턴은 함수를 끝낸다는 의미이기도 함

List.of(들, 어, 갈, 인, 수);
List.of()메소드의 특징은 변경불가능한 콜렉션.
처음에 선언할 때 인수가 비어있으면 걔는 끝까지 요소 없는 리스트
list.add(넣어줘)
어림도 없다
바로 java.lang.UnsupportedOperationException 예외가 스로된다.

공변리턴값
슈퍼클래스 메소드를 서브클래스에서 오버라이드(재정의)할 때
리턴값을 원래 리턴값보다 더 작은 서브클래스나 서브인터페이스로 재정의할 수 있는 것
참고로 java.lang.Iterable인터페이스의 밑에는
java.util.Collection이나 java.nio.file.Path 서브인터페이스가 존재한다
인터페이스도 계승이 가능하니 이런 문제도 나옴

생성자는 기본 new로 호출됨
기본 생성자 문제 3행, 8행 동시에 에러;;;
;;;;;

인터페이스 - 추상클래스 - 일반클래스
이 순서도 물론 가능
public abstract class Sample3 implements Sample1{
}

LocalDate.new();
2019-08-14

pow나오고 수식을 식으로 표현하는 건 그냥 괄호 제일 많은 걸로;;;
a 10
b 10
c 10
d 10

System.out.println();
Calculator에 정의된 toString()을 부름
toString을 재정의해서 return으로 돌려주면
System.out.println(toString이 재정의된 클래스)로 바로 불러올 수 있음

예외 처리 관련
try-catch-finally이나 try-finally순으로 기술
try-catch-finally의 finally는 생략 가능
catch는 여러개 기술 가능하나, try,finally는 하나만 기술 가능
catch는 순서대로 처리되기 때문에
범위가 작은 것 -> 범위가 큰 것으로 가야 됨
(큰 걸 처음에 적으면 모든 익셉션이 첫번째에서 끝나기에
도달불가능한 코드가 발생됨
도달불가능한 코드가 발생되면? 컴파일 에러가 발생됨 이거 중요함
다른 코드에서도 도달불가능한 곳이 발생하면 컴파일 에러!!!!)

throws으로 예외를 원래 메소드로 스로로 던지는 등 catch블록에 의한 예외처리를 기술이 필요 없는 경우에는 try뒤에 finally이 올 수 있음
finally블록은 예외처리의 가장 뒤에 실행되며,
이것은 try-with-resources에서도 똑같이 적용됨

Arrays.mismatch(array1, array2);
배열 둘을 앞에서 부터 비교해서 일치하지 않는 인덱스를 return int

Arrays.compare(array1, array2);
배열 둘을 값을 서로 비교해서 틀린 인덱스 값 기준으로
같은 경우는 0
array1가 array2보다 먼저면 -1
array2가 array1보다 먼저면 1

Math.round(3.4); // 3
Math.round(3.5); // 4
반올림 메소드

부동소수를 int형으로 강제변환 해버리면 소수는 그냥 버려짐
(2.5->2)

인터페이스나 추상클래스에 있는 추상메소드는 반드시 서브에서
실장해야되는 게 맞음
근데 extends사키가 일반 클래스면 오버라이드할 필요 없지?
만약 같은 메소드명이 있다? 그러면 그건 오버로드로 봐야됨

short b = (short) 'A';
씹건웅, 반대도 씹 건웅
문자와 수치의 호환성은 있지만 캐스트식을 반드시 써야됨
따라서
char c2 = 10;
얘는 안됨

int a = 4;
int b = 2;
a + b + " = (a + b) = " + a + b
이거 주의해라
처리는 앞에서하는데
a + b 는 숫자로 계산되니 6
6 + " = (a + b) = " + a + b
여기가 중요함 문자열이 됨
"6 + = (a + b) = " a + b
"6 + = (a + b) = 4" + b
"6 + = (a + b) = 42"
OK? 틀리지마라 내일의 나 부탁한다구 젠장

Short s1 = 10; // 오토박싱
Integer s2 = 20; // 오토박싱

Long s3 = (long) s1 + s2;
s1은 long으로 언박싱
s2는 int로 언박싱
long + int // 큰 것과 작은 것을 더하면 큰 것으로 바뀜
그리고 마지막으로 Long형으로 오토박싱

String s4 = (String) (s3 + s2);
String과 정수형은 어떠한 호환성도 없으니 여기서 컴파일에러 발생

String.intern();
이미 메모리에 있는 String형을 참조하여 리턴함
New와는 == 결과 false

로컬변수는 반드시 초기화(리터럴 값 넣기)를 해야함
public static void main(String[] args){
int a;
}
이건 뭐야?
메인 메소드이지?
그럼 여기 안에 있는 건 무엇이지 소년?
네! 이 메소드 안에 있는 것은 로컬변수입니다!
따라서 반드시 초기화를 해야하며 그렇지 않으면 
컴파일에러가 발생합니다!
잘했다 소년
로컬변수는 각 {} 범위 안에서만 유효하다는 것을 기억하도록

메소드참조 람다식
클래스명::메소드명
인스턴스명::메소드명
list.forEach(Sample::print)

IDE는 이클립스 같은 개발툴
JDK를 인스톨할 때에는 특정 오퍼레이션시스템(OS)용의 자바개발환경을 셋업함
JDK에는 JRE가 포함되어 있음

String... arg
이 가변장인수는 컴파일 시 배열로 해석됨
따라서
public class Sample{
   private String[] array;
   public Sample(String... array){
   this.array = array
  }
}
이런 게 가능함
물론 저 자리에 String[] arg 얘는 당연히 가능

예외에는 검사예외, 비검사예외, 에러 이렇게 3개
검사예외는 try-catch 강제
비검사는 적어도 되는데 안 적어도 됨
에러는 프로그램에서 처리 불가능한 트러블 발생했다는 것
while(true){
  list.add("무한히돌아라")
}
Out.OfMemoryError 발생
실행시 예외가 스로됨

com.example모듈안에 있는 main메소드를 가진
com.sample.Main클래스를 커맨드라인으로 실행하는 커맨드
java --module-path mods -m com.example/com.sample.Main
--module-path는 모듈의 루트디렉토리 지정
-m 옵션은 실행하고 싶은 모듈명/완전수식클래스명

StringBuilder sb = new StringBuilder("ABCD");
sb.replace(sb.indexOf("B"), sb.index("C"), "X");
sb.replace(1, 2, "X");
인덱스1에서 2사이에 있는 글자를 모두 X로 바꾼다.

String[] str = new String[2];
어디까지 배열 요소를 지정해서 인스턴스를 생성만한 것으로
안은 null임

String result = str1.concat(str2);
문자열 str1와 str2를 합침

커맨드라인에서 모듈의 엑스포트를 설정하는 것은 가능하나 바람직하지는 않음
JAVA의 기본API는 java.base모듈에 있음







