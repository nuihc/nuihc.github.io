1. 리퀘스트 메소드 (☆는 단순히 정의되있는 거 묻는 문제)
PUT : 리소스의 변경(오키카에)을 요구 ★☆
GET : 리소스 요구 ☆
POST : 리소스 송신
DELETE : 리소스 삭제
HEAD : 리소스의 요구. 단, GET과 달리 리스폰스바디를 돌려주지 않음
OPTIONS : 서버의 조사
CONNECT : 터널을 엶 ☆
TRACE : 네트워크 경로의 조사

2. 스테타스 코드
정보
101 : 프로토콜의 교환
성공
200 : 성공
리다이렉트
301 : 영구적인 리다이렉트 ★
304 : 변경 없음. 캐쉬한 파일이 변경됨
307 : 일시적인 리다이렉트
클라이언트 에라
401 : 인증이 필요
403 : 악세스권이 필요
404 : 리소스가 발견되지 않음 ★
서버에러
500 : 서버측에서 에러가 발생

3. Basic 인증의 설명
- 유저명, 패스워드는 Autorization헤더에 추가되어 송신된다. ★
- 인증이 실패한 경우, 스테이터스 코드 401을 돌려준다. ★
- 거의 대부분의 브라우저나 Web서버에서 실장되어 있다. ★
- 유저명, 패스워드는 해시값화 하여 송신하지 않음. (위험성 〇)
- HTTPS를 이용하는 것이 바람직하지만 필수는 아님.

4. HTTP 쿠키
- 4KB정도의 데이터 보존이 가능하다.
- 브라우저에 데이터를 보존한다. ★
- JavaScript로 조작할 수 있다. ★
- HTTP, HTTPS 어느 쪽에서도 사용할 수 있다. ★
- 데이터의 유효기간을 설정할 필요가 있다.

5. HTTP로 이용되는 인증방법의 설명
- Digest인증은 유저명, 패스워드를 해시값화한다. ★
- Web어플리케이션에서는 Basic, Digest 이외의 독자적인 인증을 이용하는 것도 가능하다.

6. HTTP 리퀘스트의 설명 (잘못된 거 찾는 문제)
- 리퀘스트의 개시행에는 URL과 HTTP의 리퀘스트 메소드, HTTP버젼이 포함되어 있다.
- 메세지보디에는 브라우저에서의 송신 데이터가 포함되어 있다.
- HTTP의 리퀘스트 메소드가 GET인 경우, 메세지보디는 공백이어도 괜찮다.
- Content-Length헤더는 메세지보디의 사이즈를 설정한다.
- Accept-Language헤더는 브라우저가 이해 가능한 프로그래밍 언어를 설정하는 것이 아닌,
  브라우저가 받아들일 수 있는 자연언어(일본어, 영어 등)을 설정하기 위한 것이다. ★

7. JSON데이터의 우케이레를 나타내는 Accept헤더 필드의 기술
- Accept: application/json ★

8. 이하의 URL
   http://www.know.com/kw/sch/course.httml?cq=HTML#main
스키마://호스트명:포트번호/디렉토리/파일명
스키마~호스트명~포트번호까지를 오리지날이라고 부른다.
http://www.know.com ★
플래그먼트는 #으로 표시한다.
#main ★

9. HTTP(80) / HTTPS(443)의 기존포트번호 ★
0 ~ 1023을 웰노운 포트 번호
웰노운 포트 번호 쓰는 경우에는 생략 가능

10. HTTPS의 설명 (잘못된 것 고르는 문제)
- SSL/TLS프로토콜을 이용하여 통신을 암호화하고, 송수신을 한다.
- HTTP통신과 비교하여 Web서버의 부담이 높다.
- 암호화를 위해서는 인증국(CA)으로 부터 인증서를 취득할 필요가 있다.
- HTTP 헤더, 인잭션의 대책이 아닌, 나리스마시나 도청을 방지할 수 있다. ★
- HTTPS의 웰노운 포트 번호는 443이다.

11. 캐쉬를 제어하는 HTTP헤더필드
- AGE : 프로킨서버(프록시 서버, 중계서버)에 캐쉬하는 기한을 설정한다. 10은 10초. ☆
- Cache-Control : 캐쉬의 제어를 행한다. ☆
- Expires : 리스폰의 유효기간을 설정한다. ☆

12. 리다이렉트의 지정방법 (옳지 않은 것)
- JavaScript로 전송처를 지정할 수 있다.
- <link>태그로 전송처를 지정할 수 없고, CSS 참조에 사용한다. ★
- <meta>태그로 전송처를 지정할 수 있다.
- Location헤더필드로 전송처를 지정할 수 있다. (리다이렉트 사키의 URL) 
- Referer헤더필드로 전송처를 지정할 수 없고, 전 페이지의 URL ★

. 주된 HTTP헤더 필드
- Accept-Language : 브라우저가 우케이레 가능한 언어 ★
- Accept : 클라이언트가 우케이레 가능한 컨텐츠 타입 ★
- Age : 프로킨서버에 캐쉬하는 초수 ★
- Authoriztion : 인증정보 ★
- Cache-Control : 캐쉬의 제어를 행한다. ★
- Content-Length : 메세지보디의 사이즈를 설정 ★
- Exprise : 리소스의 유효기한 ★
- Location : 리다이렉트처의 URL ★
- Referer : 전 페이지의 URL ★

. HTML5의 사용 선언하는 문서형선언(DOCTYPE선언)
- <!DOCTYPE html> ★

. HTML5에서 추장되고 있는 문자 코드
- UTF-8

. 이하를 표시하는 문자실체참조의 조합
    HTML에서는, 태그를<>으로 감싼다.
HTML에서는, 태그를&lt;&gt;으로 감싼다. ★
반각 스페이스 : &nbsp;
< : &lt; ★
> : &gt; ★
& : &amp; ★
" : &quot;

. HTML 문서를 이용하고 있는 언어에 일본어 지정하는 방법
<html lang="ja"> ★

. HTML5, 또는 HTML4.01의 문자코드 지정 방법
- <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"> (4.01) ★
- <meta charset="UTF-8"> (5) ★

. meta요소의 설명 (틀린 것 고르는 문제)
- name="roboots"로 검색엔진(크롤러)에 대한 설정을 할 수 있다.
- name="description"으로 페이지의 설명을 기술할 수 있다.
- charset속성으로 문자코드를 지정할 수 있다.
- http-equiv="content-security-policy"으로 세큐리티 폴리시를 설정할 수 있다.
- http-equiv="refresh"으로 동페이지를 다시 읽을 수 있는게 아니라, 설정한 시간을 경과한 후에 어떤 페이지로 리다이렉트할 것인가를 설정. ★

. head요소의 자요소로서 정의가능한 조합
- title, meta, style, link
base : 대상URL의 기점이 되는 URL을 설정
meta : Web페이지에 관한 정보를 담는다. ☆
style : CSS에 의한 스타일을 기술 ☆
title : Web페이지의 타이틀을 설정 ☆
  브라우저 탭에 나타나는 제목
link : 외부 리소스(주로 CSS파일)과의 리레숀(관계, relation) 설정 ☆

. Data URI스키마의 설명(틀린 것 찾는)
- HTML문서 내에서만 사용할 수 있는 것이 아닌, HTML이나 CSS에 외부 리소스를 담기 위한 방법 ★
- 브라우저와 Web서버의 통신회수를 줄이는 것이 가능하다.
- 파일의 종류에 따라 사이즈가 커진다.(동영상 파일을 담을 경우에는 Base64화가 필요하여 사이즈가 커진다.) 
- 동영상 데이터의 경우에는 해시값화를 한 값을 설정하는 것이 아니고, Base64화한다. ★
- 외부 리소스는 파일마다의 개별 캐쉬는 행할 수 없다.

. Data URI스키마 완성
    [  data:  ]image/png;base64, iVBORw0KGgoAA..... ★
  data: [미디어타입][;base64], 데이터

. form요소에 설정 가능한 속성 (틀린 것 찾는)
- action
- method
- id
- data-target
- XXXXX href XXXXX(href 속성은 링크사키를 지정하는 속성)

. DOM에 관한 설명 옳은 것 
- 요소의 속성을 조작할 수 있다. ★
- 이벤트를 제어할 수 있다. ★
- XML을 조작할 수 있다. ★
요소의 추가, 삭제
속성의 조작
이벤트의 처리

. 이벤트의 종류를 식별하기 위한 요소를 준비하고 싶다. 커스텀데이터를 사용하는 경우의 키워드
<ul>
	<li [  data  ]-pet-category="cat">고양이</li> ★
</ul>
주로 css나 자바스크립트에서 html에 접근할 때 사용하기 위해 준비함.

. 마이크로 데이터의 설명
- HTML 문서에 기계가 읽을 수 있는 데이터를 담는 것이 가능하다. ★
itemscope : 마이크로 데이터를 적용하는 범위를 지정. 보통 itemtype과 병술한다.
itemtype : 마이크로 데이터의 어휘를 지정
itemprop : 아이템의 프로퍼티명

. HTTP 리퀘스트, 리스폰의 설명 (틀린 것 찾는)
- 복수 리퀘스트를 통한 상태를 유지하는 스테이트풀(フル,full)통신이 아니고, 일련의 리퀘스트, 리스폰을 종료하면 사용한 상태를 폐기한다. ★
- 브라우저에서 리퀘스트를 개시하는 풀(プル,poll)형통신이 있다.
- ID와 패스워드를 이용하여 인증이 가능하다.
- HTTP헤더필드에 캐쉬를 설정하는 것이 가능하다.
- HTTP/2에서는 통신속도의 향상을 기대할 수 있다.

. 세션 설명 (틀린 것 찾는)
- 세션은 클라이언트/서버간에 스테이트레스통신을 행하기 위한 구조가 아니다. ★
- 세션을 사용하는 것으로 복수의 리퀘스트에 대한 인증정보 등의 상태관리를 행할 수 있다.
- 세션ID와 HTTP쿠키의 관리방법에 문제가 있을 경우, 세션-하이잭션 당할 위험이 있다.
- 세션ID는 명시적으로 소거하지 않는 한 계속 보지되는 것이 아니고, 일정 시간이 경과하면 서버측에서 폐기되어 무효화 된다. ★
- Web 서버는 세션ID와 브라우저를 관련지어 관리하는 것으로, 브라우저 단위로 상태관리를 행한다.

. Ajax의 설명
- 유저의 조작과 병행하여 서버와 야리토리 할 수 있다. ★
- JavaScript의 구조 오브젝트인 XMLHttpRequest를 이용한다. ★
- Web페이지 전체를 취득하지 않고, 데이터만 취득한다.
Ajax : (Asynchronous JavaScript + XML)
비동기통신에 의한 서버와 데이터의 야리토리를 행하고, 동적인 페이지의 카키카에 등을 행하는 기술

. Ajax를 이용한 경우의 메리트 (틀린 것 찾는)
- 데이터 취득에 따라 화면전이가 불필요하게 되어 유저의 대기시간을 삭감할 수 있다.
- 유저의 조작과 병행하여 Web 페이지의 일부를 갱신할 수 있다.
- 데이터만의 통신이기 때문에 네트워크 및 서버의 부담을 경감할 수 있다.
- 유저의 조작에 응한 보다 インタラクティブ(interactive 인터랙티브 상호작용적인)한 Web페이지를 작성할 수 있다.
- Ajax는 세큐리티 향상을 시키기 위한 목적이 아니다. ★

. MVC아키텍쳐의 설명 (틀린 것 찾는)
- MVC는 설게패턴의 일종으로 프로그램을 3종류의 부분으로 분할하여 설계한다.
- Model는 업무처리나 업무데이터를 담당한다.
- View는 화면표시를 담당한다.
- Controller은 데이터베이스로의 접근을 담당하는 것이 아니고, Model과 View로의 조작 후리와케를 담당한다. ★
- MVC를 이용하는 것으로 프로그램의 재사용성이나 메인테넌스성이 향상할 가능성이 있다.

. Base64의 설명 (틀린 것 찾는)
- 바이너리데이터를 텍스트데이터로 엔코드하는 방법 중 하나이다.
- Basic인증에서는 Base64가 사용되고 있다.
- Data URI스키마에서 화면 데이터 등을 HTML, CSS에 담을 경우 Base64가 사용되고 있다.
- 전자 메일에서 바이너리형식의 첨부파일을 송신할 경우 Base64가 사용되고 있다.
- Base64로 엔코드하면 파일 사이즈가 원래 사이즈의 4/3가 된다. 따라서 사이즈는 증가한다. ★

. Web으로 취급하는 것이 가능한 동영상 파일 포멧으로 알맞은 것 전부
- PNG ★
- JPEG ★
- SVG ★
- EPS(어도비 일러스트 관련)
- TIFF(웹이 아닌 인쇄용 )

. GIF의 설명
- 256색 이하의 표현이 가능하다. ★
- 애니메이션의 표현이 가능하다. ★
- 투명 가능하다.
- Windows 표준은 아니다.

. 동화파일포멧을 구분하여 사용할 때의 고려점
- 256색 이하로 표현이 가능한 동화의 경우, 파일 사이즈가 작은 GIF가 적절하다. ★
- BMP는 일반적으로 압축하지 않고 파일을 생성하기 때문에 파일 사이즈가 크고, Web사이트에서는 사용되지 않는다. ★
- 회선이 저속인 환경에서 동화를 표시할 경우, 인타레-스(홀수 짝수, 동시에)에 대응한 GIF나 PNG가 적절하다. ★
- 애니메이션 기능을 사용할 경우에는 GIF를 사용한다.
- 다소의 동화열화가 문제가 되지 않을 경우에는 비가역압축(압축률이 좋으나 해동 후 열화)으로 풀컬러에 대응한 JPEG가 적절하다.
BMP는 Windows의 표준 동화포멧
GIF 256색까지 표현 가능하지만 용량이 작음, 가역압축
PNG는 GIF의 代替(だいたい)로 W3C가 추장하는 동화 포멧, 가역압축

. 동화파일포멧의 하나인 SVG의 특징 (틀린 것 찾는)
- XML로 기술된다.
- 확대, 축소하여도 동화가 열화하지 않는다.
- CSS나 JavaScript에 의하여 제어할 수 있다.
- SVG는 비트맵 동화 방식이 아닌 벡터 동화 방식. ★
- 사진과 같은 복잡하고 다채로운 색을 사용하는 표현에는 적합하지 않고(파일이 겁나 커짐), 지도, 아이콘, 로고 등에 적절하다. ★

. Web사이트로의 부정, 공격수단과 그 위협의 조합으로 맞는 것
1. SQL인잭션 - は. 공격자에 의한 악의적인 SQL가 실행되어 데이터베이트 내부의 정보 유출, 개정, 소거가 발생할 위험이 있다.
2. 크로스사이트・리퀘스트・포제리(Forgeries) (CSRF) - ろ.공격자에 의하여 유저가 함정 사이즈에 유도되어
    인터넷뱅킹의 송금처리 등의 중요한 처리를 유저가 의도하지 않은 실행을 당해버리는 위험이 있다.
3. 크로스사이트 스크립트팅(XSS) - い.공격자에 의하여 부정한 스크립트가 Web페이지에 담겨져 다른 유저의 브라우저상에서 실행되어 버리고
    가짜 웹페이지가 표시되어 버리는 위험이 있다.

. 크로스사이트 스크립팅(XSS)의 대책 (잘못된 것 찾는)
- 클라이언트측 및 서버측에서 입력치의 체크를 행한다.
- Web페이지에 출력하는 모든 요소에 대하여 특수문자로 이스케이프 처리를 施す(ほどこす) (대책 등을) 세운다.
- HTTP쿠키에 HttpOnly속성을 설정한다.
- script요소의 내용을 동적으로 생성하지 않는다.
- HTTP리스폰헤더의 Referer필드에 문자코드를 설정하여도 아무 의미 없다. 링크되어 있는 元의 리소스 URL를 가르킬 뿐이다. ★

. W3C가 표준화하고 있는 기술로서 바른 것
- DOM ★
- HTML ★
- CSS ★

. 벤더프리픽스의 설명
- 브라우저벤더가 시험적기능 등을 제공할 때에 사용한다. ★

. SST/TLS의 설명 (잘못된 것)
- 공통키암호방식을 이용하고 있다.
- 공개키암호방식을 이용하고 있다.
- 인증서를 이용한다.
- 도청대책이 된다.
- Directory traversal attack (ディレクトリトラバーサル) 대책이 안 된다. ★

.Web사이트 전체의 스타일을 CSS파일에 모아서 정의하여 HTML에서 읽어들일 경우의 기술
<link rel= "[  stylesheet  ]" type="text/css" href="CSS/style.css">
rel속성에서는 링크할 파일과의 관계를 정의한다.
type속성의 既定値(기정치, 디폴트값)는 test/css이므로 생략 가능.

.HTML내의 Web페이지 전체의 스타일을 정의할 경우의 기술 알맞은 것
-<style> h1 { color : red; } </style> ★
-<style type="text/css"> h1 { color : red; } </style> ★

. 특정 요소에 스타일을 지정하는 인라인스타일시트의 설명
- 스타일을 지정하는 요소에 style속성으로서 기술한다. ★
- 하나의 요소에 대하여 복수의 스타일을 지정할 수 있다. ★
- 동 페이지의 여러 요소를 한 번에 스타일 지정하는 것이 아니고, 하나에 복수의 스타일 지정
- 스타일이 중복될 경우에는 설정방법에 따라 우선순위가 결정된다.
        인라인스타일시트★ > 외부스타일시트 또는 내부스타일 시트 > 유저스타일시트 > 유저에이전트스타일시트
인라인 스타일 시트 : 한 부분만 적용
  <span style="color : red; text-decoration : underline" }> h1내용 </span>
외부 스타일 시트
  <link rel="stylesheet" type="text/css" href="style.css">
내부 스타일 시트 : 페이지 전체의 span에 대하여 적용
  <style> span { color : red; } </style>
유저 스타일은 브라우저에서 유저가 설정한 값
유저 에이전트 스타일스트는 브라우저 기정치
외부와 내부는 우선 순위 같기 때문에 결국 나중에 적용된 게 적용

스타일 시트에 있어서 다른 CSS 파일을 읽어들일 경우의 기술
@import url("CSS파일의 URL");
@import url("CSS/style.css") 미디어타입;

<ul>
    <li></li>
    <li></li>
</ul>
ul { color : red; }
li { color : red; }
.className { color : red; }
#iDName { color : red; }
* { color : red; } <-유니버셜 샐렉터
[이 부분이 속성 샐렉터]
a[href *= "flm"]{ color : red; }
[href] href 속성 가지는 요소
[href = "flm"] 속성명 and 속성치의 완전일치
[href *= "flm"] 속성명 and  속성치를 포함하는 부분일치 "flm", "flm aab", "llf-flm"
[href ~= "flm"] 속성치가 여럿이어도 하나만 포함되면 가능 "flm", "flm aab", "dde llf flm"
[href |= "flm"] 속성치로 시작하는 요소 + 하이픈 사용 가능  "flm", "flm-aab", "flm-eee-dds"
[href ^= "flm"] 속성치로 시작되는 요소 "flm", "flm aab", "flm-dde"
[href $= "flm"] 속성치로 종료되는 요소 "flm", "aab flm", "dde-flm"

. button:horver { color : red;} 疑似(의사 클래스)
link:미방문 링크
visited:방문한 링크
active:마우스로 누르고 있을 때
horver:마우스 올려뒀을 때
focus:입력창 클릭해서 커서 활성화 시켰을 때

<div>
    <h4>NEWS</h4>
    <p>한글이지롱</p>
    <p>english</p>
</div>
한글이지롱 빨갛게
p:nth-child(2) { color : red; }
p:first-of-type { color : red; }
※child와 of-type의 차이점 : type는 같은 종류의 요소만 포함한다.
p요소에 대한 스타일이므로 p만 적용된다..?

:nth-child(n)
:nth-last-child(n)
:nth-of-type(n)
:nth-last-of-type(n)
:first-child
:last-child
:first-of-type
:last-of-type

. 셀랙터 (틀린 것 2개)
div > p {  ....   }
div < p {  ....   } ×
div + p {  ....   }
div , p {  ....   }
div - p {  ....   } ×

A > B
A 바로 밑에 있는 자손 B (B의 밑에 있는 자손은 포함되지 않음)
A + B
가장 인접한 형제요소, 같은 부모 요소를 가진다
A ~ B
후속하는 모든 형제요소, A 이후에 오는 모든 B 형제가 선택
A B
A의 하이카에 있는 B를 선택 (자손 중 하나)
A, B
그룹화, 가능함

. CSS 설명 (틀린 것)
-HTML이나 XML, SVG등에 적용할 수 있다.
-요소의 외견(見栄え) 설정을 할 수 있다.
-문서구조를 설정할 수는 없다. ★
- Cascading Style Sheets의 약어이다.
- W3C의 표준사양이다.

. HTML요소의 특정한 부분만 가시화하는 CSS 프로퍼티
- clip 프로퍼티
이미지 전제에서 클립 따는 형식

. CSS에서 HTML요소를 비표시한 경우의 설명 (틀린 것 2개)
- display 프로퍼티로 비표시된 요소가 점하고 있는 스페이스는 채워진다.
- opacity 프로퍼티로 요소 전체에 투과를 하기 위해 값을 0으로 설정한다.
- visiblity 프로퍼티로 요소를 비표시하기 위해 값을 hidden으로 설정한다.
비표시 방법
opacity : 0;
visibility : hidden;
display : none;
opacity와 visibility를 비표시하여도 스페이스 유지되지만, display는 스페이스 자체가 사라진다.(스페이스가 채워진다)
opacity, visibility의 스페이스는 채워지지 않는다. ★

. list-style 프로퍼티에서 한 번에 설정 가능한 프로퍼티 모두
- list-style-type ★
- list-style-image ★
- list-style-position ★
그 외에 list-style로 있음

. 리스트 표시 중 Ⅰ, Ⅱ, Ⅲ을 표시하는 list-style-type 프로퍼티 설정 값
- upper-roman ★
disc : ●
circle : ○
decimal : 1, 2...
upper-latin : A, B...
upper-greek : 알파, 오메가...

. h3요소로 작성한 見出し(표제)의 1막, 2막, 3막과 같은 연번을 후루 경우에 사용하는 프토퍼티 3가지
- counter-reset ★
- counter-increment ★
- cotnet ★

. 이미지의 카사나리 순 지정하는
- z-index
0이 기본값, 1,2..순으로 점점 올라감

. Web폰트의 설명으로서 바른 것 3개
- @font-face 규칙으로 폰트 파일을 지정한다. ★
- 복수의 폰트 포맷이 있다. ★
- @font-face 규칙으로 읽어들인 폰트를 font-family 프로퍼티로 설정한다. ★
- Web폰트 파일은 서버 상에 존재하기 때문에, 클라이언트 머신에 인스톨 되어 있지 않아도 사용할 수 있음
- 영어 뿐만 아니라 일본어, 한국어 등의 여러 언어 폰트도 존재.

. Web폰트를 지정하는 키워드 바른 것
- @font-face

. 가변박스에 있어서 주축(主軸、しゅじく)에 따라서 flex 아이템의 배치를 설정하는 프로퍼티
- justify-contnet ★
여러 디바이스에 따라 변하는 박스를 가변박스라고 부름
flex-direction : 주축의 방향을 설정
align-items : 교차축에 따라서 flex 아이템의 배치 장소를 설정
flex-shrink : 요소의 크기를 가변형으로 설정
flex-grow : flex 컨텐츠 내에서 어느 스페이스를 취할지 설정
왼쪽에서 오른쪽 끝이 주축, 위에서 아래 끝이 교차축

. 가변박스의 설명 (틀린 것 찾는)
- 수평방향으로 요소를 정렬하는 것이 가능하다.
- 수직(垂直、すいちょく)방향으로 요소를 정렬하는 것이 가능하다.
- HTML의 기술순에 따르지 않고 요소를 정렬하는 것이 가능하다.
- 요소의 크기를 변경할 수 있다.
- 요소의 형태를 변경하는 것은 불가능하다. ★

. color 프토퍼티의 설정치 (잘못된 것 찾는)
- aqua
- #00FFFF
- rgba(0, 255, 255, 1) (마지막 a채널로 투명도 표시 0이면 투명)
- hsl(180, 100%, 50%) (색상, 채도, 휘도)
- 0, 255, 255 ★
그 외에
rgb(r, g, b)도 가능

.이하의 CSS 프로퍼티에서 적용하여 HTML에서 투과되는 것 2개
- color : rgba(0, 255, 0, 0) ; ★
- opacity : 0 ; ★

.이하 색 무슨 색?
color : #008000;
rgb순이니까 아무튼 초록색★

. transform 프로퍼티를 이용하여 요소를 경사(傾斜、けいしゃ) 시키는 값
- skew★
img{  transform : skew(20deg); } 


.
transform-origin : right bottom;
trasnform : ratate(90deg);
transform-origin을 기점으로 시계 방향으로 90도 돌린다.
따라서 기존 이미지 cat1에서 오른쪽으로 400px 떨어진 곳에 90도 회전시킨 cat2가 표시된다.★

.테이블의 列幅(れつはば、열폭)을 고정하는 프로퍼티
- table-layout★

.caption-side 프로퍼티를 사용하여 캡션을 표시할 수 있는 위치로서 알맞은 것
- 위★
- 아래★
캡션은 그 표의 설명, 이미지 설명문 같은 거 붙이는 거

.transition 프로퍼티의 설명
- CSS 프로퍼티의 변화속도를 제어할 수 있다.★
움직이는 애니매이션 효과 속도를 조절
대상이 움직이지 않는 한 아무런 효과 없음

. 이하의 color 프로퍼티에 트랜지션을 적용할 경우에 사용하는 프로퍼티로 바른 것
a : hover {
    color : blue;
}
- transition : 트랜지션 숏 버젼, transition-property 없이 바로 color, 3s로 사용 가능★
- transition-property : 트랜지션을 적용할 프로퍼티의 이름을 지정한다.★

. 애니메이션을 정의하는 키워드로서 바른 것
- @keyframes★

. 74p 틀린 것 하나 찾는
- 1초 경과 한 후에 애니매이션 개시 (animation-delay : 1s;)
- 3초간에 걸쳐서 애니매이션이 실행된다. (animation-duration : 3s;)
- 애니메이션 종료 후, img 요소는 원래의 위치로 돌아가지 않는다.(animation-fill-mode:forwards;)★
- img 요소는 오른쪽으로 이동하여 투과된다. (margin-left : 0%에서 100%이 되었으므로)
- 애니메이션이 2회 반복된다. (animation-iteration-count : 2;)

. 76p 바른 것 하나 찾는
- 3초간에 걸쳐 요소가 역방향(180도 회전)에서 위쪽방향(0도 회전)이 된다. ★
animation-direction : reverse; 가 있으므로 100% 에서 0%로 간다.

. 애니메이션을 무한 반복시키는 키워드
- animation-iteration-count : infinite ; ★

. CSS 에러 발생시의 동작으로 바른 것
- 에러가 발생한 CSS의 설정은 무시되고, CSS의 パース가 계속된다. ★

. html 요소의 폰트 사이즈과 비교하여 폰트 사이즈를 1.2배로 할 경우의 설정
- font-size : 1.2rem ★

. 폰트를 이타릭 카츠 후토모지로 설정하는 프로퍼티
- font-weight / font-style ★
span {
    font-weight : bold;
    font-style : italic;
}

. 폰트의 설명으로 알맞은 것 2개
- 폰트 패밀리명에 스페이스가 포함된 경우, 쿼테이션으로 감싼다. ★
- 브라우저마다 기정의 폰트패밀리가 다르다. ★
- 지정한 폰트패밀리는 유저 환경을 상관하지 않고 사용할 수 있지 않다.
- 폰트패밀리는 3개 까지만 지정할 수 있는 게 아니고 제한은 없다.
- 폰트 패밀리를 복수 지정한 경우 반드시 모두 적용되는 것은 아니다. 앞에 지정한 폰트가 있으면 그걸 먼저 사용 후 없으면 뒤로 간다.
font-family : Arial, "Lucida Grande"

. font 프토퍼티에서 합쳐서 지정할 수 있는 프로퍼티로서 알맞은 것 모두
- font-style ★ : 스타일 지정
- font-variant ★ : 스몰캡으로 바꾼다.(소문자와 같은 높이의 대문자)
- font-family ★ : 폰트 지정
- line-height ★ : 최소 요소의 높이를 지정할 수 있다.
- font-height : 폰트의 두꺼움을 지정
- font-size-adjust XXXXXXXX 소문자의 높이에 맞춰 폰트 사이즈를 변경하는 프로퍼티. 아무튼 폰트 프로퍼티 아님

. 텍스트를 중앙정렬 할 수 있는 프로퍼티
- text-align : center; ★

. word-spacing 프로퍼티와 letter-spcing프로퍼티의 설명의 조합으로 바른 것
- word-spacing은 단어간의 스페이스 설정  ★
  letter-spacing은 문자간의 스페이스 설정  ★

. 텍스트에 우치케시센 붙이는 경우의 값으로 공란
- text-decoration : double black [  line-through  ] ★

. 텍스트를 왼쪽에서 오른쪽에 표시하는 설정으로 알맞은 조합
- direction / unicode-bidi ★
텍스트 요소의 진행 방향을 지정하는 프로퍼티
ltr(왼에서 오), rtl(오에서 왼)

. 이하의 프로퍼티의 설명으로 알맞은 조합
- text-shadow : 텍스트에 그림자를 붙인다. ★
- line-height : 텍스트의 높이를 지정한다. ★
- vertical-align : 縦(타테)방향의 정렬방법을 지정한다. ★

. 박스모델의 구성하는 요소 (잘못된 것)
- height ★
- width ★
- border : 박스모델(padding과 맞닿은)의 와꾸센 ★
- margin : padding의 와꾸센 밖의 영역 ★
margin - padding - content(height, width)
padding, content를 싸잡아서 border이라고 부름

. 이하의 CSS를 지정한 경우 HTML 요소가 점하는 폭으로서 알맞은 것
box-sizing : border-box; ★
로 지정하면 border(와꾸선, 패딩, 컨텐츠)의 크기를 width 크기로 맞춘다.
box-sizing : content-box;
는 그냥 하나하나 다 세면 됨

. 블록레벨의 요소인 것 (폭 100% 블록)
- div, p, form, ol(순서 있는), ul(순서 없는), li,  table, h1, video ★
인라인 레벨의 요소 (inline)
- img, span, button

.
padding : 10px 20px; (상하 / 좌우) ★
padding : 10px 20px 10px; (상 / 좌우 / 하) ★
padding : 10px 20px 10px 20px; (상 우 하 좌) ★

. 중앙 정렬
margin : 0 auto; ★

.
블럭 요소를 인라인 요소로 바꾸기 위한 float:left ★
div1, div2 
중에 div1만 float:left를 주면 div1 20%, div2 80% 식으로 둘만으로 한 블럭이 채워지지만
div1, div2 둘 다 float:left를 주면 div1 20%, div 20% 그 뒤에 오는 나머지 요소도 전부 블럭의 남은 60% 공간에 다 들어가 버린다.
부모 요소 :: after로 가상요소를 하나 만들고 거기 clear : boat;를 주는 것으로 해제할 수 있음 ★

ます形+切る
완전히 다 ~하다.

. div요소 등에 収まりきらない(다 들어가지 않는) 부분의 텍스트를 비표시하기 위한 설정
- overflow : hidden; ★
visible : 넘든 말든 영역 넘겨서 다 보여줌
scroll : 넘는 건 스크롤로 수납하여 보여줌

. 요소의 배경에 동화를 설정하기 위해 사용하는 키워드
- background : rect(cat.jpg) no-repeat; ★
고양이 사진 넣고, 반복하지 않는다.

. 배경동화를 전체화면표시로 할 경우
- background-size : cover; ★
auto : 이미지 원본값을 그대로 유지.
contain : 설정한 영역 안에서 이미지 잘리는 거 없이 확대, 축소 해서 보여줌
cover : 나머지 자르거나 반복해서 꽉 채워서 보여줌
꽉 채우기 위해서는 100vw, 100vh, background-size : cover

. border 프로퍼티에서 설정 가능한 프로퍼티 모두
- border-style ★
- border-width ★
- border-color ★

. 와꾸선을 둥글게 하는 프로퍼티
- border-radius ★

. width프로퍼티와 heigh프로퍼티가 100px인 div 요소를 원형으로 만드는 값
- border-radius : 50% ★

. box-shadow 프로퍼티를 이용하여 내측을 향하여 ぼかす(선염하다? 점점 흐려지게 만드는) 그림자의 설정
- box-shadow : inset 5px 5px 5px black; ★
그림자 x축, y축, 보카시 설정, 그림자의 확대, 축소(양수, 음수) 
inset는 그림자를 내부에 설정

. 왼쪽에서 오른쪽에 걸쳐서 배경에 그라데이션을 거는 설정
- background-image : linear-gradient(90deg, blue, red); ★
밑에서 위로 0deg
왼에서 오른쪽 90deg
위에서 밑으로 180deg

. columns 프로퍼티의 설명
- 열방향의 멀티칼럼레이아웃을 실현할 수 있다. ★
column-count와 column-width(열의 최소 폭)의 숏버전
div{
    columns : 2 300px;
}

. 열 설정된 놈 빼는 프로퍼티
- column-span : all; ★

. 부모 요소 div에 color, font-size, padding 설정, 자식 요소 p에 계승되는 것은?
- color, font-size; ★
기본적으로 부모에 적용된 스타일은 자식에게 계승된다.
단, padding, margin 프로퍼티 등의 박스모델 관련의 프로퍼티는 계승되지 않는다.

.
p{
    color : red [ !important ] ;
    color : blue;
}
전술된 프로퍼티의 우선순위를 높이는 !important ★

. 셀랙터 우선순위
!important> 인라인스타일시트(HTML안에 바로 style 지정) > id > class, 속성 셀랙터, 의사 클래스 > 타입샐렉터, 의사 요소

. CSS 프로퍼티의 우선순위
우선순위가 높은 프로퍼티가 많은 게 우선순위가 더 높음
인라인스타일시트 >> # >> . [] :: : >> 덩그러니
다 쪼개서 봐라, a > b의 경우 a랑 b만 포함. >는 안 봄. 얘가 덩그러니 2개

.p요소는 무슨 색?
.latest{
    color : blue;
}
#new{
    color : yellow;
}
p {
    color : red;
}
<div id="news" style="color:green">
    <p class="latest">HTML555555555</p>
</div>
- 블루우ㅜㅜㅜㅜㅜㅜㅜㅜㅜㅜㅜㅜ ★
p요소에 직접 프로퍼티 설정하고 있는 것은 latest와 p 2가지.
2가지 중 우선순위 높은 것은 class 샐렉터.

. HTML5 요소의 설명 적절한 것
- HTML5에서는 요소가 의미적으로 바르게 사용되고 있는 것이 중요하다. ★
- 컨텐츠모델이란 각요소가 내포할 수 있는 컨첸트를 정의한 것이다. ★
- 요소는 7종료의 카테고리로 분류된다. ★
- 트랜스페어렌트란 부모 요소의 컨텐츠 모델을 우케츠즈쿠 요소를 말한다.
- Web페이지의 스타일을 바꾸기 위해 요소를 사용하는 것은 바람직 하지 않다.

. HTML5의 섹션에 관한 설명 중 옳은 것 3개
- 섹션은 body, section, article, aside, nav의 탭으로 명시적으로 정의할 수 있다. ★
- 섹션 각각이 그 독자의 미다시 층계를 가지는 것이 가능하다. ★
- 섹션을 이레코로 한 경우, 내측의 세션은 h1요소를 가지는 것이 가능하다. ★
- 섹션은 표제와 그것에 이어지는 컨텐츠에 의한 구성되고, 문서의 장, 절로 표시한다.
- 명시적으로 표현도 가능하고, h1~h6로 암묵적으로 구성을 표현하는 것도 가능하다.

.
- 아웃라인 h1, h2(들여쓰기), blockquote는 보여주지 않음.
아웃라인이란 문서내의 표제만 빼서 섹션과 그 층계구조를 일목하게 알수 있게 한 것.
h1~h6가지 있음

. 섹션과 그에 관한 요소의 설명 바른 것
- header 요소를 문서의 冒頭(ぼうとう서두, 제일 앞에?), footer 요소를 문서의 최후에 배치할 필요는 없다. ★
- section요소는 의미를 가지는 컨텐츠의 집합을 표한다. ★
- aside 요소는 광고나 사이드바 등, 메인컨텐츠와 관련성이 얉은 컨텐츠의 섹션을 표한다. ★
- article 요소에 이레코를 한 경우에 내측의 요소는 외측의 요소와 관련한 기사를 표한다.
- h1~h6 요소는 해당섹션의 미다시를 표하기 때문에 코미다시, 부제목을 표하기 위해 쓰면 안 된다.

. 서식 방향에 관한 아래의 공란에 적절한 요소명
[ ★bdi ] 요소에서 다른 서식방향이 사용될 가능성이 있는 곳을 격리하는 것으로
일본어, 영어, 아랍어 등의 다른 서식방향의 언어가 혼재한 부분을 바르게 표기할 수 있다.

. 루비 소스코드
- <ruby>熟語<rt>じゅくご</rt></ruby>
- <ruby>熟語<rp>(</rp><rt>じゅくご</rt><rp>)</rp></ruby>
rp는 브라우저에서 루비 불가능한 경우 괄호로 보여줌
rp열고 닫고 열고 닫고

.








