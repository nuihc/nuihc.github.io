1. 리퀘스트 메소드 (☆는 단순히 정의되있는 거 묻는 문제)
PUT : 리소스의 변경(오키카에)을 요구 ★☆ 약간 밀어넣어서 갱신하는 이미지
GET : 리소스 요구 ☆★
POST : 리소스 송신
DELETE : 리소스 삭제
HEAD : 리소스의 요구. 단, GET과 달리 리스폰스바디를 돌려주지 않음 ★
OPTIONS : 서버의 조사
CONNECT : 터널을 엶 ☆
TRACE : 네트워크 경로의 조사

2. 스테타스 코드
정보
101 : 프로토콜의 교환
성공
200 : 성공
리다이렉트
301 : 영구적인 리다이렉트 ★
304 : 변경 없음. 캐쉬한 파일이 변경됨
307 : 일시적인 리다이렉트
클라이언트 에라
401 : 인증이 필요 ★
403 : 악세스권이 필요
404 : 리소스가 발견되지 않음 ★
서버에러
500 : 서버측에서 에러가 발생

3. Basic 인증의 설명
- 유저명, 패스워드는 Autorization헤더에 추가되어 송신된다. ★
- 인증이 실패한 경우, 스테이터스 코드 401을 돌려준다. ★
- 거의 대부분의 브라우저나 Web서버에서 실장되어 있다. ★
- 유저명, 패스워드는 해시값화 하여 송신하지 않음. (위험성 〇)
- HTTPS를 이용하는 것이 바람직하지만 필수는 아님.

4. HTTP 쿠키
- 4KB정도의 데이터 보존이 가능하다.
- 브라우저에 데이터를 보존한다. ★
- JavaScript로 조작할 수 있다. ★
- HTTP, HTTPS 어느 쪽에서도 사용할 수 있다. ★
- 데이터의 유효기간을 설정할 필요가 있다.

5. HTTP로 이용되는 인증방법의 설명
- Digest인증은 유저명, 패스워드를 해시값화한다. ★
- Web어플리케이션에서는 Basic, Digest 이외의 독자적인 인증을 이용하는 것도 가능하다.

6. HTTP 리퀘스트의 설명 (잘못된 거 찾는 문제)
- 리퀘스트의 개시행에는 URL과 HTTP의 리퀘스트 메소드, HTTP버젼이 포함되어 있다.
- 메세지보디에는 브라우저에서의 송신 데이터가 포함되어 있다.
- HTTP의 리퀘스트 메소드가 GET인 경우, 메세지보디는 공백이어도 괜찮다.
- Content-Length헤더는 메세지보디의 사이즈를 설정한다.
- Accept-Language헤더는 브라우저가 이해 가능한 프로그래밍 언어를 설정하는 것이 아닌,
  브라우저가 받아들일 수 있는 자연언어(일본어, 영어 등)을 설정하기 위한 것이다. ★

7. JSON데이터의 우케이레를 나타내는 Accept헤더 필드의 기술
- Accept: application/json ★

8. 이하의 URL
   http://www.know.com/kw/sch/course.httml?cq=HTML#main
스키마://호스트명:포트번호/디렉토리/파일명
스키마~호스트명~포트번호까지를 오리지날이라고 부른다.
http://www.know.com ★
플래그먼트는 #으로 표시한다.
#main ★

9. HTTP(80) / HTTPS(443)의 기존포트번호 ★
0 ~ 1023을 웰노운 포트 번호
웰노운 포트 번호 쓰는 경우에는 생략 가능

10. HTTPS의 설명 (잘못된 것 고르는 문제)
- SSL/TLS프로토콜을 이용하여 통신을 암호화하고, 송수신을 한다.
- HTTP통신과 비교하여 Web서버의 부담이 높다.
- 암호화를 위해서는 인증국(CA)으로 부터 인증서를 취득할 필요가 있다.
- HTTP 헤더, 인잭션의 대책이 아닌, 나리스마시나 도청을 방지할 수 있다. ★
- HTTPS의 웰노운 포트 번호는 443이다.

11. 캐쉬를 제어하는 HTTP헤더필드
- AGE : 프로킨서버(프록시 서버, 중계서버)에 캐쉬하는 기한을 설정한다. 10은 10초. ☆
- Cache-Control : 캐쉬의 제어를 행한다. ☆
- Expires : 리스폰의 유효기간을 설정한다. ☆

12. 리다이렉트의 지정방법 (옳지 않은 것)
- JavaScript로 전송처를 지정할 수 있다.
- <link>태그로 전송처를 지정할 수 없고, CSS 참조에 사용한다. ★
- <meta>태그로 전송처를 지정할 수 있다.
- Location헤더필드로 전송처를 지정할 수 있다. (리다이렉트 사키의 URL) 
- Referer헤더필드로 전송처를 지정할 수 없고, 전 페이지의 URL ★

. 주된 HTTP헤더 필드
- Accept-Language : 브라우저가 우케이레 가능한 언어 ★
- Accept : 클라이언트가 우케이레 가능한 컨텐츠 타입 ★
- Age : 프로킨서버에 캐쉬하는 초수 ★
- Authoriztion : 인증정보 ★
- Cache-Control : 캐쉬의 제어를 행한다. ★
- Content-Length : 메세지보디의 사이즈를 설정 ★
- Exprise : 리소스의 유효기한 ★ 0과 같은 부정한 값이 들어가면 무제한이 되어버림
- Location : 리다이렉트처의 URL ★
- Referer : 전 페이지의 URL ★

. HTML5의 사용 선언하는 문서형선언(DOCTYPE선언) (기술형)
- <!DOCTYPE html> ★★

. HTML5에서 추장되고 있는 문자 코드
- UTF-8

. 이하를 표시하는 문자실체참조의 조합
    HTML에서는, 태그를<>으로 감싼다.
HTML에서는, 태그를&lt;&gt;으로 감싼다. ★
반각 스페이스 : &nbsp;
< : &lt; ★
> : &gt; ★
& : &amp; ★
" : &quot;

. HTML 문서를 이용하고 있는 언어에 일본어 지정하는 방법(기술형)
<html lang="ja"> ★

. HTML5, 또는 HTML4.01의 문자코드 지정 방법
- <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"> (4.01) ★
- <meta charset="UTF-8"> (5) ★

. meta요소의 설명 (틀린 것 고르는 문제)
- name="roboots"로 검색엔진(크롤러)에 대한 설정을 할 수 있다.
- name="description"으로 페이지의 설명을 기술할 수 있다.
- charset속성으로 문자코드를 지정할 수 있다.
- http-equiv="content-security-policy"으로 세큐리티 폴리시를 설정할 수 있다.
- http-equiv="refresh"으로 동페이지를 다시 읽을 수 있는게 아니라, 설정한 시간을 경과한 후에 어떤 페이지로 리다이렉트할 것인가를 설정. ★

. meta 요소로 설정할 수 있는 것
- viewport ★
- 문자코드 ★
 
. head요소의 자요소로서 정의가능한 조합
- title, meta, style, link
base : 대상URL의 기점이 되는 URL을 설정
meta : Web페이지에 관한 정보를 담는다. ☆
style : CSS에 의한 스타일을 기술 ☆
title : Web페이지의 타이틀을 설정 ☆
  브라우저 탭에 나타나는 제목
link : 외부 리소스(주로 CSS파일)과의 리레숀(관계, relation) 설정 ☆

. Data URI스키마의 설명(틀린 것 찾는)
- HTML문서 내에서만 사용할 수 있는 것이 아닌, HTML이나 CSS에 외부 리소스를 담기 위한 방법 ★
- 브라우저와 Web서버의 통신회수를 줄이는 것이 가능하다.
- 파일의 종류에 따라 사이즈가 커진다.(동영상 파일을 담을 경우에는 Base64화가 필요하여 사이즈가 커진다.) 
- 동영상 데이터의 경우에는 해시값화를 한 값을 설정하는 것이 아니고, Base64화한다. ★
- 외부 리소스는 파일마다의 개별 캐쉬는 행할 수 없다.

. Data URI스키마 완성 (기술식)
    [  data:  ]image/png;base64, iVBORw0KGgoAA..... ★
  data: [미디어타입][;base64], 데이터

. form요소에 설정 가능한 속성 (틀린 것 찾는)
- action
- method
- id
- data-target
- XXXXX href XXXXX(href 속성은 링크사키를 지정하는 속성)

. DOM에 관한 설명 옳은 것 
- 요소의 속성을 조작할 수 있다. ★
- 이벤트를 제어할 수 있다. ★
- XML을 조작할 수 있다. ★
요소의 추가, 삭제
속성의 조작
이벤트의 처리

. 이벤트의 종류를 식별하기 위한 요소를 준비하고 싶다. 커스텀데이터를 사용하는 경우의 키워드 (기술식) 
<ul>
	<li [  ★data  ]-pet-category="cat">고양이</li> ★
</ul>
주로 css나 자바스크립트에서 html에 접근할 때 사용하기 위해 준비함.

. 마이크로 데이터의 설명
- HTML 문서에 기계가 읽을 수 있는 데이터를 담는 것이 가능하다. ★
itemscope : 마이크로 데이터를 적용하는 범위를 지정. 보통 itemtype과 병술한다.
itemtype : 마이크로 데이터의 어휘를 지정
itemprop : 아이템의 프로퍼티명

. 마이크로 데이터
- Web페이지 퍼포먼스 향상을 위한 것이 아니다. ★
- 어휘를 정의하는 단체는 Schema.org가 있다.
- SEO의 대책이 된다.

. HTTP 리퀘스트, 리스폰의 설명 (틀린 것 찾는)
- 복수 리퀘스트를 통한 상태를 유지하는 스테이트풀(フル,full)통신이 아니고, 일련의 리퀘스트, 리스폰을 종료하면 사용한 상태를 폐기한다. ★
- 브라우저에서 리퀘스트를 개시하는 풀(プル,poll)형통신이 있다.
- ID와 패스워드를 이용하여 인증이 가능하다.
- HTTP헤더필드에 캐쉬를 설정하는 것이 가능하다.
- HTTP/2에서는 통신속도의 향상을 기대할 수 있다.

. 세션 설명 (틀린 것 찾는)
- 세션은 클라이언트/서버간에 스테이트레스통신을 행하기 위한 구조가 아니다. ★
- 세션을 사용하는 것으로 복수의 리퀘스트에 대한 인증정보 등의 상태관리를 행할 수 있다.
- 세션ID와 HTTP쿠키의 관리방법에 문제가 있을 경우, 세션-하이잭션 당할 위험이 있다.
- 세션ID는 명시적으로 소거하지 않는 한 계속 보지되는 것이 아니고, 일정 시간이 경과하면 서버측에서 폐기되어 무효화 된다. ★
- Web 서버는 세션ID와 브라우저를 관련지어 관리하는 것으로, 브라우저 단위로 상태관리를 행한다.

. Ajax의 설명
- 유저의 조작과 병행하여 서버와 야리토리 할 수 있다. ★
- JavaScript의 구조 오브젝트인 XMLHttpRequest를 이용한다. ★
- Web페이지 전체를 취득하지 않고, 데이터만 취득한다.
Ajax : (Asynchronous JavaScript + XML)
비동기통신에 의한 서버와 데이터의 야리토리를 행하고, 동적인 페이지의 카키카에 등을 행하는 기술

. Ajax를 이용한 경우의 메리트 (틀린 것 찾는)
- 데이터 취득에 따라 화면전이가 불필요하게 되어 유저의 대기시간을 삭감할 수 있다.
- 유저의 조작과 병행하여 Web 페이지의 일부를 갱신할 수 있다.
- 데이터만의 통신이기 때문에 네트워크 및 서버의 부담을 경감할 수 있다.
- 유저의 조작에 응한 보다 インタラクティブ(interactive 인터랙티브 상호작용적인)한 Web페이지를 작성할 수 있다.
- Ajax는 세큐리티 향상을 시키기 위한 목적이 아니다. ★

. MVC아키텍쳐의 설명 (틀린 것 찾는)
- MVC는 설게패턴의 일종으로 프로그램을 3종류의 부분으로 분할하여 설계한다.
- Model는 업무처리나 업무데이터를 담당한다.
- View는 화면표시를 담당한다.
- Controller은 데이터베이스로의 접근을 담당하는 것이 아니고, Model과 View로의 조작 후리와케를 담당한다. ★
- MVC를 이용하는 것으로 프로그램의 재사용성이나 메인테넌스성이 향상할 가능성이 있다.

. Base64의 설명 (틀린 것 찾는)
- 바이너리데이터를 텍스트데이터로 엔코드하는 방법 중 하나이다.
- Basic인증에서는 Base64가 사용되고 있다.
- Data URI스키마에서 화면 데이터 등을 HTML, CSS에 담을 경우 Base64가 사용되고 있다.
- 전자 메일에서 바이너리형식의 첨부파일을 송신할 경우 Base64가 사용되고 있다.
- Base64로 엔코드하면 파일 사이즈가 원래 사이즈의 4/3가 된다. 따라서 사이즈는 증가한다. ★

. Web으로 취급하는 것이 가능한 동영상 파일 포멧으로 알맞은 것 전부
- PNG ★
- JPEG ★
- SVG ★
- EPS(어도비 일러스트 관련)
- TIFF(웹이 아닌 인쇄용 )

. GIF의 설명
- 256색 이하의 표현이 가능하다. ★
- 애니메이션의 표현이 가능하다. ★
- 투명 가능하다.
- Windows 표준은 아니다.

. 화상파일포멧을 구분하여 사용할 때의 고려점
- 256색 이하로 표현이 가능한 화상의 경우, 파일 사이즈가 작은 GIF가 적절하다. ★
- BMP는 일반적으로 압축하지 않고 파일을 생성하기 때문에 파일 사이즈가 크고, Web사이트에서는 사용되지 않는다. ★
- 회선이 저속인 환경에서 화상를 표시할 경우, 인타레-스(홀수 짝수, 동시에)에 대응한 GIF나 PNG가 적절하다. ★
- 애니메이션 기능을 사용할 경우에는 GIF를 사용한다.
- 다소의 화상열화가 문제가 되지 않을 경우에는 비가역압축(압축률이 좋으나 해동 후 열화)으로 풀컬러에 대응한 JPEG가 적절하다.
BMP는 Windows의 표준 화상포멧
GIF 256색까지 표현 가능하지만 용량이 작음, 가역압축
PNG는 GIF의 代替(だいたい)로 W3C가 추장하는 화상 포멧, 가역압축

. 화상파일포멧의 하나인 SVG의 특징 (틀린 것 찾는)
- XML로 기술된다.
- 확대, 축소하여도 화상이 열화하지 않는다.
- CSS나 JavaScript에 의하여 제어할 수 있다.
- SVG는 비트맵 화상 방식이 아닌 벡터 화상 방식. ★
- 사진과 같은 복잡하고 다채로운 색을 사용하는 표현에는 적합하지 않고(파일이 겁나 커짐), 지도, 아이콘, 로고 등에 적절하다. ★

. Web사이트로의 부정, 공격수단과 그 위협의 조합으로 맞는 것
1. SQL인잭션 - は. 공격자에 의한 악의적인 SQL가 실행되어 데이터베이트 내부의 정보 유출, 개정, 소거가 발생할 위험이 있다.
2. 크로스사이트・리퀘스트・포제리(Forgeries) (CSRF) - ろ.공격자에 의하여 유저가 함정 사이즈트 유도되어
    인터넷뱅킹의 송금처리 등의 중요한 처리를 유저가 의도하지 않은 실행을 당해버리는 위험이 있다.
3. 크로스사이트 스크립트팅(XSS) - い.공격자에 의하여 부정한 스크립트가 Web페이지에 담겨져 다른 유저의 브라우저상에서 실행되어 버리고
    가짜 웹페이지가 표시되어 버리는 위험이 있다.

. 크로스사이트 리퀘스트 포제리의 대책
- Refere 헤더필드를 확인하여 올바른 링크모토인지 확인 ★
- POST 메소드로 송신페이지를 숨긴다. hidden 파라미터를 담는다. ★

. 크로스사이트 스크립팅(XSS)의 대책 (잘못된 것 찾는)
- 클라이언트측 및 서버측에서 입력치의 체크를 행한다.
- Web페이지에 출력하는 모든 요소에 대하여 특수문자로 이스케이프 처리를 施す(ほどこす) (대책 등을) 세운다.
- HTTP쿠키에 HttpOnly속성을 설정한다.
- script요소의 내용을 동적으로 생성하지 않는다.
- HTTP리스폰헤더의 Referer필드에 문자코드를 설정하여도 아무 의미 없다. 링크되어 있는 元의 리소스 URL를 가르킬 뿐이다. ★

. W3C가 표준화하고 있는 기술로서 바른 것
- DOM ★
- HTML ★
- CSS ★

.JavaScript의 표준화를 행하는 단체
- Ecma International ★

. 벤더프리픽스의 설명
- 브라우저벤더가 시험적기능 등을 제공할 때에 사용한다. ★

. SST/TLS의 설명 (잘못된 것)
- 공통키암호방식을 이용하고 있다.
- 공개키암호방식을 이용하고 있다.
- 인증서를 이용한다.
- 도청대책이 된다.
- Directory traversal attack (ディレクトリトラバーサル) 대책이 안 된다. ★

.Web사이트 전체의 스타일을 CSS파일에 모아서 정의하여 HTML에서 읽어들일 경우의 기술 (기술식)
<link rel= "[  ★stylesheet  ]" type="text/css" [ ★href  ]="CSS/style.css">
rel속성에서는 링크할 파일과의 관계를 정의한다.
type속성의 既定値(기정치, 디폴트값)는 test/css이므로 생략 가능.

.HTML내의 Web페이지 전체의 스타일을 정의할 경우의 기술 알맞은 것
-<style> h1 { color : red; } </style> ★
-<style type="text/css"> h1 { color : red; } </style> ★

. 특정 요소에 스타일을 지정하는 인라인스타일시트의 설명
- 스타일을 지정하는 요소에 style속성으로서 기술한다. ★
- 하나의 요소에 대하여 복수의 스타일을 지정할 수 있다. ★
- 동 페이지의 여러 요소를 한 번에 스타일 지정하는 것이 아니고, 하나에 복수의 스타일 지정
- 스타일이 중복될 경우에는 설정방법에 따라 우선순위가 결정된다.
        인라인스타일시트★ > 외부스타일시트 또는 내부스타일 시트 > 유저스타일시트 > 유저에이전트스타일시트
인라인 스타일 시트 : 한 부분만 적용
  <span style="color : red; text-decoration : underline" }> h1내용 </span>
외부 스타일 시트
  <link rel="stylesheet" type="text/css" href="style.css">
내부 스타일 시트 : 페이지 전체의 span에 대하여 적용
  <style> span { color : red; } </style>
유저 스타일은 브라우저에서 유저가 설정한 값
유저 에이전트 스타일스트는 브라우저 기정치
외부와 내부는 우선 순위 같기 때문에 결국 나중에 적용된 게 적용

스타일 시트에서 다른 CSS 파일을 읽어들일 경우의 기술 (기술식)
@import url("CSS파일의 URL");
@import url("CSS/style.css") 미디어타입;

<ul>
    <li></li>
    <li></li>
</ul>
ul { color : red; }
li { color : red; }
.className { color : red; }
#iDName { color : red; }
* { color : red; } <-유니버셜 샐렉터
[이 부분이 속성 샐렉터]  ★
a[href *= "flm"]{ color : red; }
[href] href 속성 가지는 요소
[href = "flm"] 속성명 and 속성치의 완전일치
[href *= "flm"] ★ 속성명 and  속성치를 포함하는 부분일치 "flm", "flm aab", "llf-flm"
[href ~= "flm"] 속성치가 여럿이어도 하나만 포함되면 가능 "flm", "flm aab", "dde llf flm"
[href |= "flm"] 속성치로 시작하는 요소 + 하이픈 사용 가능  "flm", "flm-aab", "flm-eee-dds"
[href ^= "flm"] 속성치로 시작되는 요소 "flm", "flm aab", "flm-dde"
[href $= "flm"] 속성치로 종료되는 요소 "flm", "aab flm", "dde-flm"

. button:horver { color : red;} 疑似(의사 클래스)
link:미방문 링크
visited:방문한 링크
active:마우스로 누르고 있을 때
horver:마우스 올려뒀을 때
focus:입력창 클릭해서 커서 활성화 시켰을 때

<div>
    <h4>NEWS</h4>
    <p>한글이지롱</p>
    <p>english</p>
</div>
한글이지롱 빨갛게
p:nth-child(2) { color : red; }
p:first-of-type { color : red; }
※child와 of-type의 차이점 : type는 같은 종류의 요소만 포함한다.
p요소에 대한 스타일이므로 p만 적용된다..?

:nth-child(n)
:nth-last-child(n)
:nth-of-type(n)
:nth-last-of-type(n)
:first-child
:last-child
:first-of-type
:last-of-type

. 이하의 셀랙터에서 지정한 요소에 대하여 CSS에서 머리앞에 [￥]를 붙여서 표시할 경우의 공란(기술식)
.price :: [  before  ]{
    content : "'￥￥";
}

. 셀랙터 (틀린 것 2개)
div > p {  ....   }
div < p {  ....   } ×
div + p {  ....   }
div , p {  ....   }
div - p {  ....   } ×

A > B
A 바로 밑에 있는 자손 B (B의 밑에 있는 자손은 포함되지 않음)
A + B
가장 인접한 형제요소, 같은 부모 요소를 가진다
A ~ B
후속하는 모든 형제요소, A 이후에 오는 모든 B 형제가 선택
A B
A의 하이카에 있는 B를 선택 (자손 중 하나)
A, B
그룹화, 가능함

. CSS 설명 (틀린 것)
-HTML이나 XML, SVG등에 적용할 수 있다.
-요소의 외견(見栄え) 설정을 할 수 있다.
-문서구조를 설정할 수는 없다. ★
- Cascading Style Sheets의 약어이다.
- W3C의 표준사양이다.

. HTML요소의 특정한 부분만 가시화하는 CSS 프로퍼티
- clip 프로퍼티
이미지 전제에서 클립 따는 형식

. CSS에서 HTML요소를 비표시한 경우의 설명 (틀린 것 2개)
- display 프로퍼티로 비표시된 요소가 점하고 있는 스페이스는 채워진다.
- opacity 프로퍼티로 요소 전체에 투과를 하기 위해 값을 0으로 설정한다.
- visiblity 프로퍼티로 요소를 비표시하기 위해 값을 hidden으로 설정한다.
비표시 방법
opacity : 0;
visibility : hidden;
display : none;
opacity와 visibility를 비표시하여도 스페이스 유지되지만, display는 스페이스 자체가 사라진다.(스페이스가 채워진다)
opacity, visibility의 스페이스는 채워지지 않는다. ★

. list-style 프로퍼티에서 한 번에 설정 가능한 프로퍼티 모두
- list-style-type ★
- list-style-image ★
- list-style-position ★
그 외에 list-style로 있음

. 리스트 표시 중 Ⅰ, Ⅱ, Ⅲ을 표시하는 list-style-type 프로퍼티 설정 값
- upper-roman ★
disc : ●
circle : ○
decimal : 1, 2...
upper-latin : A, B...
upper-greek : 알파, 오메가...

. h3요소로 작성한 見出し(표제)의 1막, 2막, 3막과 같은 연번을 후루 경우에 사용하는 프토퍼티 3가지
- counter-reset ★
- counter-increment ★
- content ★

. 이미지의 카사나리 순 지정하는
- z-index ★
0이 기본값, 1,2..순으로 점점 올라감

. Web폰트의 설명으로서 바른 것 3개
- @font-face 규칙으로 폰트 파일을 지정한다. ★
- 복수의 폰트 포맷이 있다. ★
- @font-face 규칙으로 읽어들인 폰트를 font-family 프로퍼티로 설정한다. ★
- Web폰트 파일은 서버 상에 존재하기 때문에, 클라이언트 머신에 인스톨 되어 있지 않아도 사용할 수 있음
- 영어 뿐만 아니라 일본어, 한국어 등의 여러 언어 폰트도 존재.

. Web폰트를 지정하는 키워드 바른 것
- @font-face ★

. Web 폰트 설정 예
- @font-face{
    font-family : "flmfont";
    src : url("http://www.cc.co.kr/ffdd.ttf")
}★★★★★★★

. 가변박스에 있어서 주축(主軸、しゅじく)에 따라서 flex 아이템의 배치를 설정하는 프로퍼티
- justify-contnet ★
여러 디바이스에 따라 변하는 박스를 가변박스라고 부름
flex-direction : 주축의 방향을 설정
align-items : 교차축에 따라서 flex 아이템의 배치 장소를 설정
flex-shrink : 요소의 크기를 가변형으로 설정
flex-grow : flex 컨텐츠 내에서 어느 스페이스를 취할지 설정
왼쪽에서 오른쪽 끝이 주축, 위에서 아래 끝이 교차축

. 가변박스의 설명 (틀린 것 찾는)
- 수평방향으로 요소를 정렬하는 것이 가능하다.
- 수직(垂直、すいちょく)방향으로 요소를 정렬하는 것이 가능하다.
- HTML의 기술순에 따르지 않고 요소를 정렬하는 것이 가능하다.
- 요소의 크기를 변경할 수 있다.
- 요소의 형태를 변경하는 것은 불가능하다. ★

. color 프토퍼티의 설정치 (잘못된 것 찾는)
- aqua
- #00FFFF
- rgba(0, 255, 255, 1) (마지막 a채널로 투명도 표시 0이면 투명)
- hsl(180, 100%, 50%) (색상, 채도, 휘도)
- 0, 255, 255 ★
위의 방법은 틀렸고 rgb(r, g, b)가 가능 

.이하의 CSS 프로퍼티에서 적용하여 HTML에서 투과되는 것 2개
- color : rgba(0, 255, 0, 0) ; ★
- opacity : 0 ; ★

.이하 색 무슨 색?
color : #008000;
rgb순이니까 아무튼 초록색★

. transform 프로퍼티를 이용하여 요소를 경사(傾斜、けいしゃ) 시키는 값
- skew★
img{  transform : skew(20deg); } 

. trasnform 프토퍼티 값을 trasnlate로 설정하면
- 요소가 이동한다. ★

.
transform-origin : right bottom;
trasnform : ratate(90deg);
transform-origin을 기점으로 시계 방향으로 90도 돌린다.
따라서 기존 이미지 cat1에서 오른쪽으로 400px 떨어진 곳에 90도 회전시킨 cat2가 표시된다.★

. CSS 프로퍼티만으로 실행할 수 있는 것
- 와꾸선의 각을 둥글게
- 요소에 그림자를 넣는다
- 요소를 비스듬하게 한다.
- 배경에 그라데이션을 넣는다.
- 이중 취소선은 불가능. ★

.테이블의 列幅(れつはば、열폭)을 고정하는 프로퍼티
- table-layout★

.caption-side 프로퍼티를 사용하여 캡션을 표시할 수 있는 위치로서 알맞은 것
- 위★
- 아래★
캡션은 그 표의 설명, 이미지 설명문 같은 거 붙이는 거

.transition 프로퍼티의 설명
- CSS 프로퍼티의 변화속도를 제어할 수 있다.★
움직이는 애니매이션 효과 속도를 조절
대상이 움직이지 않는 한 아무런 효과 없음

. 이하의 color 프로퍼티에 트랜지션을 적용할 경우에 사용하는 프로퍼티로 바른 것
a : hover {
    color : blue;
}
- transition : 트랜지션 숏 버젼, transition-property 없이 바로 color, 3s로 사용 가능★
- transition-property : 트랜지션을 적용할 프로퍼티의 이름을 지정한다.★

. transition과 animation의 설명
- 어느쪽도 동작 개시 까지의 시간을 설정할 수 있다.
- 어느쪽도 변화에 걸리는 시간을 설정할 수 있다.
- 애니메이션은 실행 중간 지점의 변화를 개별적으로 설정할 수 있다.
- 애니메이션은 실행 후에 CSS 프로퍼티를 원래대로 되돌린다.
- 트랜지션은 CSS 프로퍼티의 변화 스피드만 제어할 뿐이고, 
  애니메이션은 자동적으로 동작하는 애니메이션을 설정할 수 있다는 것이 다름 ★

. 애니메이션을 정의하는 키워드로서 바른 것
- @keyframes★

. 74p 틀린 것 하나 찾는
- 1초 경과 한 후에 애니매이션 개시 (animation-delay : 1s;)
- 3초간에 걸쳐서 애니매이션이 실행된다. (animation-duration : 3s;)
- 애니메이션 종료 후, img 요소는 원래의 위치로 돌아가지 않는다.(animation-fill-mode:forwards;)★
- img 요소는 오른쪽으로 이동하여 투과된다. (margin-left : 0%에서 100%이 되었으므로)
- 애니메이션이 2회 반복된다. (animation-iteration-count : 2;)

. 76p 바른 것 하나 찾는
- 3초간에 걸쳐 요소가 역방향(180도 회전)에서 위쪽방향(0도 회전)이 된다. ★
animation-direction : reverse; 가 있으므로 100% 에서 0%로 간다.

. 애니메이션을 무한 반복시키는 키워드(기술식)
- animation-iteration-count : [  infinite  ] ; ★

. CSS 에러 발생시의 동작으로 바른 것
- 에러가 발생한 CSS의 설정은 무시되고, CSS의 パース가 계속된다. ★

. html 요소의 폰트 사이즈과 비교하여 폰트 사이즈를 1.2배로 할 경우의 설정
- font-size : 1.2rem ★

. 폰트를 이타릭 카츠 후토모지로 설정하는 프로퍼티
- font-weight / font-style ★
span {
    font-weight : bold;
    font-style : italic;
}

. 폰트의 설명으로 알맞은 것 2개
- 폰트 패밀리명에 스페이스가 포함된 경우, 쿼테이션으로 감싼다. ★
- 브라우저마다 기정의 폰트패밀리가 다르다. ★
- 지정한 폰트패밀리는 유저 환경을 상관하지 않고 사용할 수 있지 않다.
- 폰트패밀리는 3개 까지만 지정할 수 있는 게 아니고 제한은 없다.
- 폰트 패밀리를 복수 지정한 경우 반드시 모두 적용되는 것은 아니다. 앞에 지정한 폰트가 있으면 그걸 먼저 사용 후 없으면 뒤로 간다.
font-family : Arial, "Lucida Grande"

. font 프토퍼티에서 합쳐서 지정할 수 있는 프로퍼티로서 알맞은 것 모두
- font-style ★ : 스타일 지정
- font-variant ★ : 스몰캡으로 바꾼다.(소문자와 같은 높이의 대문자)
- font-family ★ : 폰트 지정
- line-height ★ : 최소 요소의 높이를 지정할 수 있다.
- font-height : 폰트의 두꺼움을 지정
- font-size-adjust XXXXXXXX 소문자의 높이에 맞춰 폰트 사이즈를 변경하는 프로퍼티. 아무튼 폰트 프로퍼티 아님

. 개행방법을 설정할 수 있는 프로퍼티
- word-break ★

. 텍스트를 중앙정렬 할 수 있는 프로퍼티
- text-align : center; ★

. word-spacing 프로퍼티와 letter-spcing프로퍼티의 설명의 조합으로 바른 것
- word-spacing은 단어간의 스페이스 설정  ★
  letter-spacing은 문자간의 스페이스 설정  ★

. 텍스트에 우치케시센 붙이는 경우의 값으로 공란
- text-decoration : double black [  line-through  ] ★

. 텍스트를 왼쪽에서 오른쪽에 표시하는 설정으로 알맞은 조합
- direction / unicode-bidi ★
텍스트 요소의 진행 방향을 지정하는 프로퍼티
ltr(왼에서 오), rtl(오에서 왼)

. 이하의 프로퍼티의 설명으로 알맞은 조합
- text-shadow : 텍스트에 그림자를 붙인다. ★
- line-height : 텍스트의 높이를 지정한다. ★
- vertical-align : 縦(타테)방향의 정렬방법을 지정한다. ★

. 박스모델의 구성하는 요소 (잘못된 것으로 background가 나옴)
- height ★
- width ★
- border : 박스모델(padding과 맞닿은)의 와꾸센 ★
- margin : padding의 와꾸센 밖의 영역 ★
margin - padding - content(height, width)
padding, content를 싸잡아서 border이라고 부름

. 와꾸선의 내측의 여백을 설정할 수 있는 프로퍼티. 
- padding ★

. 이하의 CSS를 지정한 경우 HTML 요소가 점하는 폭으로서 알맞은 것
box-sizing : border-box; ★
로 지정하면 border(와꾸선, 패딩, 컨텐츠)의 크기를 width 크기로 맞춘다.
box-sizing : content-box;
는 그냥 하나하나 다 세면 됨

. 블록레벨의 요소인 것 (폭 100% 블록)
- div, p, form, ol(순서 있는), ul(순서 없는), li,  table, h1, video ★
인라인 레벨의 요소 (inline)
- img, span, button

.
padding : 10px 20px; (상하 / 좌우) ★
padding : 10px 20px 10px; (상 / 좌우 / 하) ★
padding : 10px 20px 10px 20px; (상 우 하 좌) ★

. 중앙 정렬
margin : 0 auto; ★

.
블럭 요소를 인라인 요소로 바꾸기 위한 float:left ★
div1, div2 
중에 div1만 float:left를 주면 div1 20%, div2 80% 식으로 둘만으로 한 블럭이 채워지지만
div1, div2 둘 다 float:left를 주면 div1 20%, div 20% 그 뒤에 오는 나머지 요소도 전부 블럭의 남은 60% 공간에 다 들어가 버린다.
부모 요소 :: after로 가상요소를 하나 만들고 거기 clear : boat;를 주는 것으로 해제할 수 있음 ★

. 마와리코미를 설정하는 프로퍼티
- float ★

ます形+切る
완전히 다 ~하다.

. div요소 등에 収まりきらない(다 들어가지 않는) 부분의 텍스트를 비표시하기 위한 설정
- overflow : hidden; ★
visible : 넘든 말든 영역 넘겨서 다 보여줌
scroll : 넘는 건 스크롤로 수납하여 보여줌

. 요소의 배경에 화상을 설정하기 위해 사용하는 키워드
- background : rect(cat.jpg) no-repeat; ★
고양이 사진 넣고, 반복하지 않는다.

. 배경화상를 전체화면표시로 할 경우
- background-size : cover; ★
auto : 이미지 원본값을 그대로 유지.
contain : 설정한 영역 안에서 이미지 잘리는 거 없이 확대, 축소 해서 보여줌
cover : 나머지 자르거나 반복해서 꽉 채워서 보여줌
꽉 채우기 위해서는 100vw, 100vh, background-size : cover

. border 프로퍼티에서 설정 가능한 프로퍼티 모두
- border-style ★
- border-width ★
- border-color ★

. 와꾸선을 둥글게 하는 프로퍼티
- border-radius ★

. border-radius 프로퍼티에서 사용할 수 없는 설정
border-top-left-radius : 2px / 5px ;★
top-left 이런식이면 슬러쉬 쓸 수 없음.
일반 border-radius에는 사용 가능.

. width프로퍼티와 heigh프로퍼티가 100px인 div 요소를 원형으로 만드는 값
- border-radius : 50% ★

. box-shadow 프로퍼티를 이용하여 내측을 향하여 ぼかす(선염하다? 점점 흐려지게 만드는) 그림자의 설정
- box-shadow : inset 5px 5px 5px black; ★
그림자 x축, y축, 보카시 설정, 그림자의 확대, 축소(양수, 음수) 
inset는 그림자를 내부에 설정

. 왼쪽에서 오른쪽에 걸쳐서 배경에 그라데이션을 거는 설정
- background-image : linear-gradient(90deg, blue, red); ★
밑에서 위로 0deg
왼에서 오른쪽 90deg
위에서 밑으로 180deg

. columns 프로퍼티의 설명
신문 생각
- 열방향의 멀티칼럼레이아웃을 실현할 수 있다. ★
column-count와 column-width(열의 최소 폭)의 숏버전
div{
    columns : 2 300px;
}

. 열 설정된 놈 빼는 프로퍼티
- column-span : all; ★

. 부모 요소 div에 color, font-size, padding 설정, 자식 요소 p에 계승되는 것은?
- color, font-size; ★
기본적으로 부모에 적용된 스타일은 자식에게 계승된다.
단, padding, margin 프로퍼티 등의 박스모델 관련의 프로퍼티는 계승되지 않는다.

.(기술식)
p{
    color : red [ !important ] ;
    color : blue;
}
전술된 프로퍼티의 우선순위를 높이는 !important ★

. 셀랙터 우선순위
!important> 인라인스타일시트(HTML안에 바로 style 지정) > id > class, 속성 셀랙터, 의사 클래스 > 타입샐렉터, 의사 요소

. CSS 프로퍼티의 우선순위
우선순위가 높은 프로퍼티가 많은 게 우선순위가 더 높음
인라인스타일시트 >> # >> . [] :: : >> 덩그러니
다 쪼개서 봐라.
a > b의 경우 a랑 b만 포함. >는 안 봄. 얘가 덩그러니 2개

.p요소는 무슨 색?
.latest{
    color : blue;
}
#new{
    color : yellow;
}
p {
    color : red;
}
<div id="news" style="color:green">
    <p class="latest">HTML555555555</p>
</div>
- 블루우ㅜㅜㅜㅜㅜㅜㅜㅜㅜㅜㅜㅜ ★
p요소에 직접 프로퍼티 설정하고 있는 것은 latest와 p 2가지.
2가지 중 우선순위 높은 것은 class 샐렉터.

. 세만틱웹을 설명 이 밑에 나오는 게 이거인 듯
- 컴퓨터가 판독가능한 Web 페이지 ★

. HTML5 요소의 설명 적절한 것
- HTML5에서는 요소가 의미적으로 바르게 사용되고 있는 것이 중요하다. ★
- 컨텐츠모델이란 각요소가 내포할 수 있는 컨첸트를 정의한 것이다. ★
- 요소는 7종료의 카테고리로 분류된다. ★
- 트랜스페어렌트란 부모 요소의 컨텐츠 모델을 우케츠즈쿠 요소를 말한다.
- Web페이지의 스타일을 바꾸기 위해 요소를 사용하는 것은 바람직 하지 않다.

. HTML5의 섹션에 관한 설명 중 옳은 것 3개
- 섹션은 body, section, article, aside, nav의 탭으로 명시적으로 정의할 수 있다. ★
- 섹션 각각이 그 독자의 미다시 층계를 가지는 것이 가능하다. ★
- 섹션을 이레코로 한 경우, 내측의 세션은 h1요소를 가지는 것이 가능하다. ★
- 섹션은 표제와 그것에 이어지는 컨텐츠에 의한 구성되고, 문서의 장, 절로 표시한다.
- 명시적으로 표현도 가능하고, h1~h6로 암묵적으로 구성을 표현하는 것도 가능하다.

.
- 아웃라인 h1, h2(들여쓰기), blockquote는 보여주지 않음. ★
아웃라인이란 문서내의 표제만 빼서 섹션과 그 층계구조를 일목하게 알 수 있게 한 것.
h1~h6가지 있음

. 섹션과 그에 관한 요소의 설명 바른 것
- header 요소를 문서의 冒頭(ぼうとう서두, 제일 앞에?), footer 요소를 문서의 최후에 배치할 필요는 없다. ★
- section요소는 의미를 가지는 컨텐츠의 집합을 표한다. ★
- aside 요소는 광고나 사이드바 등, 메인컨텐츠와 관련성이 얉은 컨텐츠의 섹션을 표한다. ★★
- article 요소에 이레코를 한 경우에 내측의 요소는 외측의 요소와 관련한 기사를 표한다.
- h1~h6 요소는 해당섹션의 미다시를 표하기 때문에 코미다시, 부제목을 표하기 위해 쓰면 안 된다.

. 서식 방향에 관한 아래의 공란에 적절한 요소명(기술식)
[ ★bdi ] 요소에서 다른 서식방향이 사용될 가능성이 있는 곳을 격리하는 것으로
일본어, 영어, 아랍어 등의 다른 서식방향의 언어가 혼재한 부분을 바르게 표기할 수 있다.

. 루비 소스코드
- <ruby>熟語<rt>じゅくご</rt></ruby> ★
- <ruby>熟語<rp>(</rp><rt>じゅくご</rt><rp>)</rp></ruby> ★
rp는 브라우저에서 루비 불가능한 경우 괄호로 보여줌
rp열고 닫고 열고 닫고

.
- <ruby>熟語<rt>じゅくご</ruby> 생략 가능 ★
- <ruby>熟<rb>語</rb><rt>じゅく</rt><rt>ご</rt></ruby> ★
- <ruby>熟<rb>語</rb><rt>じゅく<rt>ご</ruby> ★
닫는 거 생략 가능?

.
ul, li 안에서
취소선 : <del></del> ★
밑줄 : <ins></ins> ★

. main 요소의 설명 바른 것
- 이치에 맞으면 문서 내에 복수의 main 요소가 존재해도 상관 없다. ★
- main 요소는 문서의 메인컨텐츠를 표한다. ★
- main 요소에는 각 페이지 고유의 컨텐츠를 포함하고, 
저작권정보나 사이트의 멤버, 로고, 내비게이션링크 등을 포함하지 않는다. ★
- article, aside, footer, header, nav 요소의 자식 요소에 main 요소가 들어가는 것은 불가능하다.
- main 요소는 문서의 아웃라인에 영향을 주지 않는다.

. div 요소의 사용예의 설명 (적절하지 않은 것 3개)
- article이나 section등 다른 적절한 요소가 있으면 div 요소를 우선적으로 쓰면 안된다. ★
- 사이드바나 광고를 마크업하기 위해 사용하지 않는다. (이건 aside, nav) ★
- article 요소 내에서 章立て목차 구성을 표하기 위해 사용해서는 안 된다. ★
- class, id 속성과 조합하여 스타일이나 스크립트의 사용범위를 지정한다.
- 문서 내에서 언어가 다른 부분을 표하기 위해서 lang 속성과 조합하여 사용한다.


. figure 요소, figcaption 요소의 설명
- figcaption 요소는 figure 요소라면 어디에 배치해도 괜찮다. ★
- figure 요소내의 아웃라인은 祖先(そせん)의 아웃라인에 영향을 주지 않는다. ★
- figcaption 요소는 반드시 figure 요소내에 배치해야 한다.
- 그렇다고 해서 figure 요소 안에 figcaption 요소가 반드시 필요한 것은 아니다.
- figure 요소는 문서의 주된 내용에서 참조되는 자기완결형 지도를 표한다. 본문에 영향을 주지 않아서 떼어내도 괜찮다.

. 용어 설명 리스트
dl 설명리스트 생성 ★
dt 용어 ★
dd 용어에 대한 설명 ★

. 
테마의 카와리메를 표한다 : hr ★
문서내의 단락을 표한다 : p ★
다른 정보원에서 인용된 컨텐츠를 표한다 : blockquote ★
성형즈미의 텍스트를 표한다. : pre ★

. 링크타입의 설명
링크타입이란 현재의 문서와 링크처의 외부파일의 관련성을 표하는 키워드 
- 링크타입 stylesheet는 외부 스타일시트를 표한다. ★
- 링크타입 alternate는 hreflang 속성과 조합하는 것으로 다른 언어의 페이지를 표한다. ★
- link 요소, a요소, area 요소의 rel 속성에 반각 스페이스 쿠기레로 복수의 링크타입을 지정할 수 있다. ★
- 링크타입 stylesheet는 a, area 요소 지정 불가능.
- 링크타입은 소문자, 대문자 모두 가능하다.

. 텍스트의 마크업에 관한 설명
- Copyright, 면책사항, 경고, 법적규칙, 귀속은 small 요소에 표한다. ★
- 인용해온 문장은 q요소로 표한다  ★
- cite 요소는 창작물의 出典(しゅってん출전, 출처)를 표하는 요소이다. ★
- em 요소는 그 내용을 강조할 때
- strong 요소나 em 요소는 이레코로 하는 것도 가능하다.

. mark 요소의 설명 (잘못된 것 찾는)
- 웹사이트의 검색결과를 표시할 때, 검색 키워드를 하이라이트하는 경우에 사용할 수 있다.
- 인용문에 있어서 인용자가 중요하다고 생각하는 부분을 눈에 띄게 하기 위해 사용할 수 있다.
- 소스코드 등의 구문의 하이라이트에는 span 요소가 더 적절하다.
- 스펠미스의 마크업에는 mark보다 u요소가 적절하다. ★
- 중국어로 고유명사를 마크업하는 경우에는 mark 보다 u 요소가 적절하다. ★

. 이하의 설명문에 있어서 공란에 들어갈 요소명 기술
바르지 않게 됐거나, 관련성이 없어진 정보를 표하는 [  ★s  ]요소를 사용한다.

. data 요소의 사용법으로 적절한 것
- <data value="hcj02d">CSS입문</data> ★
- <data value="39000">3만9천엔</data> ★
데이터 요소는 기계가 식별 가능한 데이터를 더할 경우에 사용한다. 
기계의 식별을 위해 value 값은 반드시 지정해야 한다.
날짜나 시간 관련 요소는 <time>요소를 사용한다.
</data> 생략 불가능.

. time 요소의 기술로 올바른 것
- <time>2014-10-14T21:50:34</time> 
- <time datetime="2014-10-14">어제</time>
- <time datetime="2014-10-14 21:50:34">어제</time>
시간 표시 슬러쉬 못 씀 ★
시간 정보가 들어가 있어야 함 ★

. abbr 요소, dfn 요소의 설명으로 바른 것
- abbr 요소는 약어나 두문자를 의미하고, 정식명칭을 tittle 속성에서 지정하는 것이 가능하다. ★
- dfn 요소의 tittle 속성은 정의 대상이 되는 용어를 표한다. ★
- dfn 요소에서 대상으로 지정한 용어에는 반드시 정의가 필요하다. ★
- abbr 요소의 tittle 속성은 특별한 의미를 가진다.
dfn 요소는 그 내용의 정의한 대상이 된다.

. 프로그래밍언어의 스니펫토(단편)을 표하는 요소
- code ★

. 다른 프로그램이나 컴퓨팅 시스템에서의 샘플 혹은 인용된 출력을 의미하는 요소명 (기술형)
- samp ★

. kbd 요소의 설명으로 올바른 것
- kbd 요소는 유저의 입력을 표한다. ★
- kbd 요소는 음성입력이나 메뉴 선택을 표하는 것도 가능하다. ★

. b요소의 사용법으로 올바른 것
- 리뷰 기사의 제품명 등을 마크업한다. ★
- b 요소 이외에 적절한 요소가 존재하지 않는 경우의 최후의 수단으로 사용한다. ★
- 중요성이 없고, 주의만 끌고 싶은 텍스트에 사용한다. ★

. i 요소에서 마크업을 하는 텍스트로서 올바른 것
- 기술용어, 전문용어★ 혹은 다른 장소와는 질이 다른 용어의 텍스트

.
- 전문용어 : i 요소 ★
- 중요한 텍스트 : strong 요소 ★
- 이미 정확하지 않게 된 텍스트. 관련성을 잃어버린 정보를 표하는: s 요소 ★★ (기술식)
오우 전문용어 인테리전트
중요한 스트롱
스트롱에서 s빼고 다 사라짐 이제 정확하지 않음ㅋㅋ


. 이산화탄소 : CO₂를 표하는 방법 공란 채워 (기술형)
이산화탄소 : CO<sub>2</sub> ★
sup 요소는 위의 작은 글자

. span 요소의 사용장면으로 적절한 것
- class 속성과 조합하여 스타일의 사용범위를 지정한다. ★
- lang 속성과 조합하여 다른 언어로 적혀진 범위라는 것을 표한다. ★
- id 속성과 조합하여 스크립트의 적용대상을 지정한다. ★

. br 요소, wbr요소의 설명 (틀린 것 찾는)
- br 요소는 개행을 표한다.
- 행간의 조절 등, 디자인적 목적으로 br 요소를 사용하지 않는다.
- wbr 요소는 텍스트내에서 개행해도 괜찮은 위치를 표한다.
- 행단락에는 br 요소를 사용하지 말고, p 요소를 사용한다. ★
- wbr 요소를 지정한 곳에서는 반드시 개행을 하지 않아도 된다. ★

. 표를 정의하는 이하의 소스코드둥 tfoot 요소를 기술하는 적절한 장소
thead요소는 헤더부, tfoot요소는 푸터부를 의미하기 때문에 <tbody></tbody> 전후에 쓰면 된다.
- 따라서 tfoot는 <tbody></tbody>기술 바로 뒤에 오면 된다. ★
table
caption
colgroup
thead
tbody
tfoot
순으로 열고 닫고 쿵짝쿵짝

. table 요소 정의의 설명으로 바른 것
- 표의 정의는 Web 페이지의 레이아웃목적으로 사용해야만 하는 것은 아니다. ★
- table 요소에 border 속성을 지정하면 레이아웃목적으로 표를 사용해서는 안 된다는 것을 명시적으로 표현할 수 있다. ★
- table 요소내의 script 요소, template 요소를 배치할 수 있다. ★

.
<tr><th>굵은 제목</th><tr>
<tr><td>내용</td><tr>

.
표의 그룹화
<colgroup>
    <col span=2>
    <col span>
</colgroup>
span 속성으로 열 수를 지정한다.
span 생략의 경우 열 수 1로 본다.

<colgroup span=2></colgroup>
<colgroup span=1></colgroup>
위의 표 그룹화와 같은 기술

. Web 페이지에 화상을 담는 기술 적절한 것
- <img src="sample.jpg" alt="샘플사진"> ★
alt 까지 써주는 게 표준이라서?

. 이하 소스코드 설명 바른 것
<picture>
    <source srcset="sample1.png" media="(min-width : 600px)">
    <source srcset="sample2.png" media="(min-width : 300px)">
    <img src="sample.png" alt="샘플사진">
</picture>
- picture요소가 서포트 되지 않는 브라우저에서는 img 요소의 화상만 표시된다. ★
- media 속성에 지정한 조건에 따라서 표시되는 화상가 바뀐다. ★

. script 요소, noscript요소의 설명 (잘못된 것 3개)
- script 요소는 head 요소, body 요소 어느 쪽에도 배치할 수 있다.
- noscript 요소내의 내용은 스크립트를 서포트하지 않는 브라우저에서 사용된다.
- script 언어가 JavaScript의 경우, type 속성의 지정은 필수가 아니다. ★
- noscript 요소는 XHTML에서는 유효하지 않다. HTML에서만 유효하다. ★
- script 요소내의 스크립트 실행 타이밍도 제어할 수 있다. ★

. 리스트 내의 일부를 스크립트에서 조작가능한 템플렛으로  하는 경우 이하의 공란 (기술형)
<ul>
    <[  ★template  ] id = "item">
        <li>템플렛요소를 서포트하고 있지 않습니다.</li>
    </[  ★template  ]>
</ul>

.속성 중 글로벌 속성
글로벌 속성은 어떤 요소에서 지정할 수 있는 속성
- dir : 요소내의 서식방향
- id
- class
- lang
- style
- title : 요소의 보속정보
type X, rel X ★

. id, class 속성 설명
- id 속성의 값은 공백문자를 포함해서는 안된다. ★ 
- class 속성은 요소가 속하는 종류, 분류명을 표한다. ★
- class 속성은 복수의 요소에 같은 값을 지정할 수 있다. ★

. id 속성과 class 속성의 공통점 설명
- JavaScript에서 조작할 때에 사용한다. ★
- 글로벌 속성이다. ★
- CSS에 적용할 때 사용한다. ★


. 동화를 재생하기 위해 사용하는 요소
- video ★

. video 요소에 대하여 바른 설명
- video 요소의 자식 요소인 track 요소를 사용하면 동화에 자막을 추가할 수 있다. ★
- video 요소는 HTML5에서 추가된 요소이다. ★

. 브라우저에서 동화용 컨트롤러를 표시하는 경우
<video src="movies/relay.mp4" [  ★controls  ]></video>

. 이하의 코드 공란 (기술형)
<video controls autoplay loop poster="images/top.jpg">
    <source src="movies/top.mp4"  [  ★type  ]="video/mp4">
</video>
type는 생략 가능하고, 브라우저가 자동적으로 파일 형식 판단해서 재생해준다.

. audio 요소의 속성
- controls
- autoplay
- loop
- muted
- src
width X, height X ★

. audio 의 source는 모두 재생하는 게 아니고 복수인 경우 재생후보
따라서 하나만 재생시킴. ★

. source 요소의 부모요소
- picture ★
- video ★
- audio ★

. 비디오코덱의 설명
- 비디오코덱이란 동화데이터를 압축/해동할 때의 알고리즘이다.
- 대표적인 비디오코덱에는 H.264이 있다.
- 동화용 비디오코덱과 음성용 오디오코덱은 따로 있다.
- 확장자가 같은 파일이어도 비디오 코덱이 다를 수 있다.
- 브라우저가 대응하는 비디오코덱은 표준화 되어 있지 않다. ★

. 동화 파일 형식과 MIME TYPE 조합 맞는 것
- 파일 형식 : .mp4              MIME TYPE : video/mp4           ★
- 파일 형식 : .webm              MIME TYPE : video/webm         ★
.ogv - video.ogg
.mov - video/quicktime

. 다른 웹페이지나 웹페이지 안의 지정한 장소로 이동하기 위한 하이퍼링크를 작성하는 요소
- a ★
<a href="guide.html" target="_blank">학습가이드</a>

. a요소에서 h1 요소로 링크를 설정할 경우 이하의 공란 넣어라
<h1 [  ★id  ]="top">연혁</h1>
.....
<a href="[  ★#top   ]">연혁으로 이동</a>
하이퍼링크에 HTML5 이전에는 name 가능했지만 이제 못 씀
무조건 id 써야함 ★
하긴 날아가는 곳이 중복된 이름 가지면 안되긴 하지

. form 요소의 method 속성에 지정할 수 있는 값으로 올바른 것 모두
- get ★
- post ★

. 텍스트 박스에 캡션을 붙이는 경우 이하의 공란 (기술형)
<[  ★label  ]>ID : <input type="text"></[  ★label  ]>

. 입력 필수를 지정하는 경우에 지정하는 input 요소의 속성
- required  ★

. input 요소에 tpye 속성 값으로 지정할 수 있는 값 중, HTML5에서 추가된 것
- number ★
- email ★
- tel ★
- url ★
- search
- range : 슬라이더 음량 올리고 내리는 그 바
- color
- date
- time

. input 요소의 type 속성의 값
- tel 지정하면 반드시 전화번호만 넣을 수 있는 텍스트박스가 되지는 않는다. ★
  따로 이게 전화번호 형식이 맞는지 확인 안함.
근데 url이나 email은 체크 해줌.

. input 요소의 type 속성에 HTML5에서 추가된 값을 지정하는 경우, HTML5를 대응하지 않는 브라우저에서는 어떻게 표시 되는가?
- 값에 text가 지정된 것과 같은 모양이 표시된다.  ★

. 폼의 송신버튼을 작성할 때 아래의 공란 (기술형)
<button [  ★type  ] = "submit">송신</button>

. form 요소의 송신처를 지정하는 속성
- action ★

. form 요소의 자식요소 이외의 장소에 input 요소를 배치하기 위한 속성
- form ★
input 요소의 form 속성에 상위 부모 form 요소의 id 값을 넣어줌
이러면 부모 form 범위 벗어나도 사용 가능

. 
<select name="select" size="3">
    <option value="love" selected>사랑</option>
    ......
    옵션 많아
</select>
화면에 표시되는 수는 3, 기본 선택은 사랑, 전송되는 데이터는 love ★

. 
<textarea name="question" rows="5" cols="50" placeholder="문의내용">
</textarea>
게시판 입력창
- 표시영역의 높이는 5행분이다. ★
- 초기값은 지정되어 있지 않다. ★ (textarea사이에 들어간 값이 초기값)
- 입력내용을 조건하는 메세지로서 문의내용이 표시된다. ★
1행에 입력 가능한 문자는 반각 문자 50, 전각문자 25이다.
최대 입력 문자수 제한은 maxlength.

. 테스크의 진척상황을 표시하는 경우에 사용하는 요소
- progress ★

. 폼의 입력부품을 그룹화한 캡션을 지정하는 경우, 사용하는 요소의 조합으로 알맞은 것
- fieldset          legend ★
그 복수 체크 가능한 체크박스를 그룹화하여 하나로 묶을 때

. HTML5에서 폐기된 요소(폐기되지 않은 요소 찾는)
- frame
- frameset
- noframes
- center
- big
- font
아무튼 frame 관련 요소는 싸그리 폐기되고 ★iframe은 살아남음 
center도 폐기되고 중앙 정렬은 css에서 지정한다.

. iframe 요소의 설명 (틀린 것 찾는)
- src 속성의 값으로 삽입하는 파일의 패스를 지정한다.
- height 속성, width요소의 값으로 프레임의 크기를 픽셀수로 지정한다.
- Web페이지 내에서 다른 페이지의 광고 등을 삽입하는 경우에 사용된다.
- iframe 요소는 body 요소내에서 사용할 수 있다. ★
- sandbox 속성의 값에는 파일의 삽입에 대하여 제한을 해제하는 항목을 지정한다. ★

. iframe 요소에서 삽입한 파일에 스크립트의 실행을 허가한 경우, sandbox 속성값은 무엇인가
- sandbox = ★"allow-scripts" 

. 컨텍스트 메뉴와 관련되는 요소를 지정한 경우 (기술형)
<p [  ★contextmenu  ]="displayall">.....</p>
컨텍스트 메뉴? 마우스 우클릭 메뉴

. menu 요소의 설명 (틀린 것 찾는)
- 자식 요소로서 menuitem 요소를 사용한다.
- 컨텍스트메뉴를 작성하는 경우, menu 요소의 type 속성에 "context"를 지정한다.
- menu 요소의 자식요소로 hr 요소를 지정하여 쿠기리선을 설정할 수 있다.
- menu 요소를 이레코로 하는 것으로, 컨텍스트 메뉴를 층계화할 수 있다.
- menu 요소의 label 속성의 값이 컨텍스트 메뉴 항목에 표시된다. id속성 값이 아님. ★

. menu 요소의 자식요소로 지정하는 메뉴 항목을 작성하기 위해 사용하는 요소
- menuitem ★

. 디스클로저 위젯을 작성하기 위한 요소의 조합
- details       summary ★
화살표 아래 클릭하면 내려주고 올려주고

.
<details open>
    <summary>누르면 내려간다아아아</summary>
    <p>숨겨질 내용</p>
</details>
<details>
    <summary>누르면 내려간다아아아</summary>
    <p>숨겨질 내용</p>
</details>
기본값이 열려있는 디스클로저 위젯 ★
이레코로 들어가 있는 디스클로저 위젯이 아니고 그냥 병렬로 기술되어 있음 ★

. canvas 요소의 설명(잘못된 것)
- WebGL API에서 애니메이션을 묘사할 수 있다.
- Canvas API에서 애니메이션을 묘사할 수 있다.
- height 속성으로 높이를 지정할 수 있다.
- width 속성으로 폭을 설정할 수 있다.
- src 속성으로 표시할 동화를 지정할 수는 없다. canvas 요소의 src 의 속성 만으로는 아무 것도 표시되지 않음. ★

. Flash 컨텐츠를 읽어들이는 경우에 사용하는 요소
- object  ★

. 외부 동화 리소스 등을 HTML에서 읽어들이기 위해 사용하는
- object ★
- embed ★

. 레스폰시브Web디자인의 설명(잘못된 것 3개)
- PC나 스마트폰에서 공통의 Web페이지를 작성하여, 화면사이즈에 응하여 유저인터페이스를 바꾸어 최적화하는 수법이다.
- 디바이스가 달라도 공통의 URL로 작성할 수 있다.
- PC나 스마트폰 마다 Web페이지를 작성하는 것은 아니다. ★
- 기존의 Web페이지를 멀티 디바이스 대응시키는 경우에는 적합하지 않다. 다 뜯어야 됨. ★
- User-Agent의 값으로 디바이스에 대응하는 Web페이지를 리다이렉트 하는 것은 디바이스 마다 전용의 Web사이트를 만드는 방법이다. ★

. 레스폰시브Web 디자인에서 사용하는 주요한 기술 3개
- フルードイメージ(Fluid Image 액체이미지, 유연한 이미지) ★
- viewport ★
- 미디어쿼리 ★
- 후루-도그릿도(grid)

. 후루-도그리드의 설명 (잘못된 것)
- 브라우저의 윈도우 폭에 응하여 표시하는 컨텐츠의 레이아웃을 변경한다.
- Web페이지의 폭을 평등하게 분할한 단위인 그리드에 따라서 컨텐츠를 배치한다.
- 그리드는 CSS에서 횡폭을 %등의 상대치를 설정하는 것으로 실현한다.
- 디바이스의 사이즈에 응하여 그리드의 설정을 행할 수 있다.
- 브라우저의 윈도우폭이 변화하면 각 영역이 사용하는 그리드의 수도 변한다. ★

. 후루-도이미지의 설명 바른 것
- 브라우저의 윈도우사이즈에 응하여 표시하는 화상이나 동화의 사이즈를 변경하는 수법이다. ★
- 후루-도이미지를 실현하는 경우, img 요소의 max-width 프로퍼티의 값의 단위를 %로 설정한다. ★
- img 요소의 max-width에 100%를 지정한 경우, 이미지의 종횡비는 유지되지 않는다.
- 후루-도이미지를 실현하는 것에는 JavaScript가 필수는 아니다.
- 디바이스폭 마다 복수의 화상을 준비할 필요는 없다. 알아서 늘어나고 줄어든다.
- width 프로퍼티에 %단위로 값을 설정한다. ★

. 레스폰시브Web디자인의 설명
- 브라우저의 윈도우폭에 응하여 적절한 컨텐츠를 표시하는 수법으로 그리드의 폭이나 수를 변경하는 후루-도그리드가 있다.
- 실현에는 컨텐츠폭을 %등의 상대치로 설정하여, 브라우저의 윈도우폭에 응하여 적절한 CSS로 바꾼다.
- 후루-도그리드에 대응한 화면 라이브러리를 사용하는 것으로 효과적인 레스폰시브Web디자인을 실현할 수 있다.
- 하나의 HTML으로 멀티디바이스에 대응하기 위해 레이아웃 설계에 제약이 발생한다.
- 상정된 최소의 윈도우사이즈에 맞춘 화상을 준비하여, 화상을 브라우저의 윈도우사이즈에 맞춰 확대, 축소하는 것이 아니고
   상정된 최대 사이즈로 바꾼다. ★

.viewport의 설명(틀린 것 2개)
- 브라우저의 표시영역을 설정하는 기능이다.
- 스마트폰에서는 브라우저의 표시영역과 디아비스의 사이즈가 다른 때가 많다.
- 유저에 의한 확대, 축소를 제어할 수 있다.
- viewport의 지정만으로 레스폰시브Web디자인을 실현할 수는 없다. ★
- viewport는 CSS에서 설정하는 것이 아니고, HTML의 mera 요소에서 행한다. ★

. viewport의 설명으로 바른 것 2개
- 초기확대율을 initial-scale프로퍼티로 설정한다. ★
- viewport를 기준으로 요소의 폭이나 높이를 설정할 수 있는 CSS의 단위가 있다. ★(vw, vh, vmin, vmax)
- max-height, max-size는 존재하지 않는 프로퍼티이다.
- 유저에 따라 Web페이지의 확대, 축소 허가를 제어할 수도 있다.(user-scalable)

. viewport의 횡폭을 디바이스와 같은 폭으로 설정하고 싶다. 공란에 알맞은 것 (기술식)
<meta name="viewport" content="width=[  ★device-width  ]">

. 리셋 CSS의 설명 바른 것
- 브라우저의 디폴트 스타일의 차이를 정리하기 위하여 이용한다. ★

. 브라우저에 의해 초기치가 다를 가능성이 높은 CSS 프로퍼티는?
- font-family ★

. 미디어타입으로 지정할 수 있는 값을 모두 고르시오.
- speech ★
- projection ★
- all ★
- print
display X, mobile X

. 미디어쿼리를 실장하는 키워드 (기술식)
[@media] ~~~~~~

. viewport가 320px이하고 화면이 요코무키일 때에 스타일을 적용시키는 경우, 이하 공란 (기술식)
@media (max-width : 320px) and (orientation : [  ★★landscape★★  ])
타테무키는 ★★portrait★★

. 디바이스쿼리의 기술(잘못된 것 찾는)
- @media screen and (min-width : 980px) {...}
- @media (orientation : portrait) {...}
- @media not print and (max-width : 480px) {...}
- @media (braille, embossed) and (min-width : 480px) {...}
- @media screen and (min-width : 640px) or print {...} XXXXXXXX ★
디바이스 쿼리는 사용하는 디바이스의 조건에 따라 HTML에 적용시키는 스타일을 바꾸는 것.
and와 콤마(,)로 표현한다. or은 쓸 수 없다.★
미디어 타입 all은 생략할 수 있다.

. viewport의 횡폭에 따라서 스타일을 태블릿과 스마트폰용으로 바꾼다.
횡폭이 640px이상인 경우 태블릿, 640px 보다 작은 경우는 스마트폰용으로 한다.
지금부터 서로 채워라.
@media only [  ★screen  ] and ([  ★min-width : 640px  ]) and (max-width : 1024) {...}
@media only [  ★screen  ] and (min-width : 320px) and ([  ★max-width : 639px  ]) {...}
둘 다 screent 씀ㅋ
min(max)-device-width(height)는 디바이스 스크린의 폭을 표한다.

. 미디어특성으로 지정할 수 있는 해상도의 단위를 모두 골라.
- dpi ★
- dpcm ★
- dppx ★

. 해상도를 표하는 미디어 특성
- resolution ★

. 이하의 잘못을 포함한 미디어쿼리를 지정한 경우, 실제로 적용되는 미디어쿼리로 올바른 것은
@media not screen and min-power : 53m, (min-width : 480px) {...}
- @media not all, (min-width : 480px) {...} ★
min-power : 53m 여기가 잘못되어서 다음 캄마까지 모두 not all이 되어버림.

. Web페이지에 JavaScript 파일을 읽어들이는 방법으로 알맞은 것
- <script src="base.js"></script> ★

. script 요소에 defer 속성을 지정한 동작으로 올바른 것
- 브라우저가 script 요소를 패스하면 비동기로 파일을 취득한 스크립트를 페이지로드 후에 실행한다.

. JavaScript파일을 비동기로 읽어들이는 script 요소의 속성
- defer ★
- async ★

. CSS스프라이트의 설명 (틀린 것 찾는)
- 복수의 화상을 표시하는 경우, CSS 스프라이트를 이용하는 것으로 사이트의 표시를 최속화할 수 있다.
- CSS 스프라이트는 사이트내에서 반복하여 사용되는 아이콘이나 버튼 등에 사용한다.
- CSS 스프라이트를 이용하는 경우, 복수의 화상을 정리하여 둘 필요가 있다.
- CSS 스프라이트에서 적절한 화상을 표시하기 위해 CSS를 사용한다.
- CSS 스프라이트를 사용하는 것으로 화상의  바꿔끼움 등 사이트의 변경이 용이해지지는 않는다.
    하나 바꾸려면 정리해둔 이미지를 수정해야 해서 굉장히 번거로움. ★

. CSS 스프라이트를 이용하여, 이하의 화상을 통상시 OFF, 마우스 오버 시에 ON으로 표시할 경우 공란 옳은 것 2개
전체 가로x세로 200px
횡으로 잘라서 위는 OFF, 아래는 ON

.sprite_sample:horver{
    [                                           ]
}
- background-position : 0 100px; ★
- background-position : left bottom; ★
첫 번째는 x축 값, 두 번째는 y축 값

. 배경화상을 좌하구석(隅)에 표시하는 설정
- background-position : 0 100%; ★
값이 하나만 있을 때는 top, bottom, left 등을 넣을 수 있다.
둘이면 x, y축
left 100%이딴 식으로 둘은 혼재하여 쓸 수는 없다!!!!!!!!!!!!!!!


. 스마트폰 향에 전화발신용 링크를 지정한 경우, 공란?
<a href="[  ★tel  ]: 080-8855-5544">전화를 건다.</a>

. 고해상도 디스플레이에 비트맵 화상을 대응시키기 위한 방법 (잘못된 것 찾는)
- 실제 표시 사이즈 보다 큰 사이즈의 화상을 사용한다.
- JavaScript의 라이브러리를 사용하여 디스플레이의 사이즈나 해상도에 따라 표시하는 화상을 바꾼다.
- CSS미디어쿼리를 사용하여 이하 동문
- img 요소의 srcset 속성에 의한 이하 동문
- 후루-도이미지를 사용하여 이하동문을 불가능하다. ★
후루-도이미지를 사용하는 방법은 화상의 크기를 윈도우 사이즈에 따라서 바꾸는 기술이기 때문에 안 됨.

. img 요소에 srcset 속성을 지정하는 경우의 설명으로 바른 것
- 디스플레이의 해상도에 맞춰 표시하는 화상을 바꾸는 것이 가능하다. ★
- viewport의 폭에 맞춰 표시하는 화상을 바꾸는 것이 가능하다. ★
- srcset 속성에 비대응하는 브라우저에서는 src 속성에 지정한 화상을 표시한다. ★
- 페이지를 읽어들일 때 srcset 속성의 조건에 맞춰 최적의 화상을 표시 시키기에 통신이 느려질 가능성은 없다.
- srcset 속성에는 복수의 화상을 지정한다. (복수의 화상 중 조건에 맞는 하나를 보여줌)

. 파비콘의 지정에 사용하는 요소
- link ★
<link rel="icon" href="favicon.ico">
meta 요소가 아닌 link 요소 ★

. 스탠드아론모드의 설명 바른 것 2개
- iOS상의 Safari에서만 사용할 수 있다. ★
- 어드레스바를 비표시로 할 수 있는 기능. ★

. Web페이지의 숏컷을 스마트폰의 홈화면에 표시할 경우의 설명
- link 요소로 설정할 수 있다. (아이콘의 설정?) ★
- 복수 사이즈의 아이콘을 설정할 수 있다. ★
- 홈화면상에 아이콘을 표시할 수 있다. ★
- 아이콘에 적용된 효과를 무효화할 수 있다. ★
- 스플래시 스크린은 어플 기동 시에 보여주는 화면이라 아무런 관계 없음

. JavaScript에서 조작할 수 있는 video 요소, audio 요소의 기능에 관한 설명 옳은 것 모두
- 재생속도를 변경할 수 있다. ★
- 재생메뉴의 표시, 비표시를 바꿀 수 있다. ★
- 음량 0~100 설정이 아닌 0~10
- 재생 위치를 변경할 수 있다.
- 전체화면표시의 키리카에를 할 수 없다.

. 동화의 스트리밍 재생에 사용되는 프로토콜 2가지
- HLS ★
- MPEG-DASH ★

. 동화의 스트리밍 방송에서 사용되는 미디어 소스 익스텐션즈(MSE)의 설명으로 바른 것 3개
- 동화를 스프라이트하는 것으로 사이에 광고를 삽입하거나, 동화를 편집하거나 할 수 있다. ★
- Encrypted Media Extenstions를 조합하는 것으로 컨텐츠를 보호할 수 있다. ★
- 네트워크의 상황에 따라서 스트리밍의 비트레이트를 변경하는 것으로 컨텐츠가 끊기지 않고 재생할 수 있다. ★
- MSE에 플러그인은 필수가 아니다.
- 컨텐츠 재생에는 모두 읽어들일 필요가 없다. 지금 재생 구간 근처만

. Canvas 설명으로 올바른 것
- 애니메이션 묘사의 메소드는 준비되어 있지 않기 때문에 묘사를 반복하는 것으로 애니메이션을 실현할 수 있다. ★
- PNG, GIF, JPGE 등의 화상을 읽어들여 사용할 수 있다. ★
- HTML이 아닌 JavaScript를 사용하여 브라우저상에 도형을 묘사하는 기능
- 벡터 형식이 아닌 비트맵 형식이다.
- Canvas로 묘사한 도형은 DOM트리를 구성하지 않는다.

. SVG 의 설명 (잘못된 것 2개)
- 묘사한 도형은 DOM 요소로서 취급되기 때문에 JavaScript에서 변경이나 애니메이션의 조작이 가능하다.
- 벡터 형식이기에 묘사를 하기 때문에 확대해도 화상의 열화는 발생하기 어렵다.
- SVG는 XML으로 표현할 수 있고, 텍스트에디터로 편집을 하는 것도 가능하다.
- SVG형식의 파일을 HTML으로 표시하는 것은 svg요소가 아닌 img 요소를 사용한다. ★
- HTML만의 도형의 묘사를 할 수 있다. ★

. Canvas와 SVG의 특징을 설명한 것 3개
- SVG로 묘사한 도형이 증가하면 포퍼먼스가 저하된다. ★
- Canvas는 애니메이션 실현이 가능하다. ★
- SVG형식의 화상은 계산식으로 표현되기 때문에 화상의 확대, 축소에 의해 화질의 열화가 발생하기 어렵다. ★
- SVG는 복잡한 사진과 같은 상세한 화상을 묘사하기에는 부적절하다.
- Canvas로 묘사할 경우 화상의 사이즈는 처리속도에 영향을 준다.

. Geolocation API의 설명으로 바른 것
- 위도와 경도를 취득할 수 있다. ★
- GPS가 지원되지 않는 단말에서도 사용할 수 있다. ★(와이파이 AP나 IP 등을 이용)

. 스마트폰으로 위치정보를 취득할 경우에 대한 설명(잘못된 것 찾는)
- Geolocation API를 이용한다.
- 브라우저에 위치정보 이용 허가 필요.
- 현재 위치에서 이동한 경우에도 감시하여 자동적으로 새로운 정보 취득 가능.
- 지도 서비스 등과 연계하여 지도상에 현재위치 표시 가능.
- 유저의 환경에 따라 취득할 수 있는 위치정보의 정밀도나 취득시간은 일정하지 않다.★

. 기능 사용에 있어서 유저의 허가를 받아야 하는 API
- Geolocation API ★
- WebRTC ★

. 디바이스 향이 변화한 경우에 유저인터페이스를 변경할 수 있는 기술 2개 골라.
- 미디어쿼리 ★
- DeviceOrientation Event ★

.브라우저에서 취득할 수 있는 디바이스 정도 (잘못된 것 모두)
- 방향
- 속도
온도 X, 전압 X, 중력 X ★

. DOM3 Event (잘못된 것 둘 찾는)
- 포커스 상대변화에 관련한 이벤트
- 키보드조작에 관련한 이벤트
- 마우스 등의 ホイール(휠...) 장치의 조작에 관련한 이벤트
- 브라우저탭의 이동 X, 파일 다운로드 X ★

. 유저의 조작과 그것으로 인하여 발생하는 UI Event의 조합(잘못된 것 찾는)
UI Event는 DOM3를 가르킨다.
- 마우스 휠을 클릭 - 휠 이벤트가 아닌 클릭 이벤트가 발생 ★

. Touch Event 및 Pointer Event 설명 (잘못된 것 2개)
- 어느 쪽도 터치 조작를 이벤트로서 검치하는 것이 가능하다.
- Touch Event란 화면에 손가락으로 조작하고 있을 때의 상태변화에 관한 이벤트
- Touch Event는 더블터치, 스와이프 등은 대응하지 않는다. ★
- Pointer Event란 마우스나 펜, 터치 패널 등의 여러 디바이스에서 포인터 입력을 취급하기 위한 이벤트
- Pointer Event는 스마트폰 고유의 조작이 아니다. ★

. 스타일러스의 압력을 취득할 수 있는 이벤트
- Pointer Event ★

. Web Storage의 설명 올바른 것
- 키와 값의 조합으로 데이터를 보지한다. ★
- localStorageg는 윈도우나 탭간에서 데이터를 공유할 수 있다. ★
- Web Storage는 데이터의 문자열만 보존할 수 있다.
- sessionStorage는 문자열만 보존할 수 있다. ★


. Indexed Database API의 설명 (잘못된 것 2개 찾는)
- 비동기로 처리가 실행된다.
- 값으로서 오브젝트를 수납할 수 있다.
- 인덱스나 트랜잭션을 이용할 수 있다.
- 데이터의 조작은 SQL이 아닌 JavaScript로 한다. ★
- 브라우저를 닫아도 데이터는 남아있다. ★

. Web어플리케이션 조작할 때의 요건에 해당하는 기술
- 대용량의 데이터를 보존한다.
- 데이터를 영속보존한다.
- 파일이나 blob를 보존한다.
- 포퍼먼스는 요구되지 않는다.
답은 바로 Indexed Database API ★

. 어플리케이션 캐쉬의 설명 (잘못된 것 둘)
- Web페이지를 캐쉬하여 오프라인에서도 Web페이지를 표시할 수 있다.
- 매니페스트 파일에서 캐쉬한 파일을 설정한다. (매니페스트는 그룹 파일의 메타파일)
- JavaScript에 의해 캐쉬하거나 소스를 변경할 수 있다.
- HTTPS에서만 사용할 수 있는 것은 아니다. ★
- 리소스를 변경으로 자동적으로 캐쉬도 변경되지는 않는다. ★

. 어플리케이션의 캐쉬의 매니페스트의 설명 (잘못된 것 둘)
- MIME 타입은 text/cache-manifest이다.
- 매니페스트 파일의 URI를 html 요소의 manifest 속성에 지정한다.
- 문자 코드는 UTF-8이다.
- 확장자는 manifest가 아니고 일반적으로 appcache가 사용된다. ★
- XML형식으로 작성되지 않는다. ★

. 어플리케이션 캐쉬의 매니페스트 파일에 기술 가능한 키워드 전부
- CACHE : ★
- NETWORK :  ★
- SETTINGS :  ★
- FALLBACK : 

. Web Workers 의 설명 (잘못된 것 찾는)
- 자바스크립트의 처리를 병렬로 처리할 수 있다.
- 워커가 실행하는 처리는 자바스크립트 파일에 기술한다.
- 워커는 독립된 스레드로서 백그라운드에서 처리된다.
- 메인 스레드와 워커 간에 데이터를 교환할 수 있다.
- 워커에서 DOM 으로 악세스는 불가능하다. ★

. Service Workers의 설명 바른 것 2개 
- 브라우저의 백그라운드에서 스크립트를 실행할 수 있다. ★
- Web 페이지가 닫혀도 동작을 계속해서 실행할 수 있다. ★

. 푸쉬통지를 실현하는 기술의 설명 바른 것 3개
- Push API를 사용하여 서버에서 푸쉬통지를 수신할 수 있다. ★
- fetch를 사용하여 부쉬통지의 메세지 취득을 행한다. ★
- Service Workers에 스크립트를 등록하는 것으로 Web페이지를 닫아도 푸쉬통지의 수신을 가능하게 할 수 있다. ★
- 푸쉬통지의 표시에는 Notification API를 사용한다.


. 스마트폰상에서 네이티브 어플과 같이 동작하는 Web어플리케이션을 개발할 때의 설명(잘못된 것 찾는)
- Service Workers상에서 서버와 비동기통신을 행하는 경우 XMLHttpsRequest가 아닌 fetch를 이용한다. ★

. WebSoket의 설명
- 상시접속통신이다.
- 양방향통신이다.
- URI 스키마는 ws, 또는 wss이다.
- 기정의 포트는 80번, 또는 443이다.
- P2P통신과는 관련 없다. ★

. XMLHttpRequest의 설명 (잘못된 것 찾는)
- Ajax를 실현하기 위해서 사용되고 있는 것이 많다.
- 비동기 통신이다.
- 상시접속은 아니다. ★
- 기정의 포트는 80번 또는 443번이다.
- HTTP메소드를 지정할 수 있다.

. Server-Sent Events의 설명(잘못된 것 3가지)
- Web 서버측에서 데이터를 송신할 수 있다.
- 서버 사이브에서의 푸쉬통신에 특화된 기술
- 비동기처리이다.
- 브라우저에서는 데이터를 송신할 수 없다. ★
- 상시접속이 아니다. ★
- HTTP와 같은 프로토콜이다. ★

. 브라우저간에 오디오, 비디오를 송수신하는 기술
- WebRTC ★

. 적절한 기술 찾아라
1. 온라인 회의 시스템 - WebRTC ★
2. 채팅 시스템 - WebSocket API ★

. 클라이언트 서버 방식으로 상시접속 양방향 통신을 실현하는 기술
- WebSocket API ★





